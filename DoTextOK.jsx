// DoTextOK 2102// Вся информация о том, как работать с этой программой подготовки текста к вёрстке, размещена на сайте adobeindesign.ru:  http://adobeindesign.ru/2012/04/22/dotextok-2012/// © Михаил Иванюшин, 2012  ivanyushin#yandex.ru/*С дополнениеями Константина Смородского:- выполнение скрипта прямо из редактора ExtendScript Toolkit- сдвоенные символы принудительного разрыва строки (Shift+Enter) заменяются на один такой символ (ранне заменялись на знак абзаца)- отмена всех операций одной командой- скрипт в процессе работы не уничтожает содержимое буфера обмена- можно выделять любые объекты содержащие текст: текстовые фреймы, таблицы, включая вложенные- адаптированы шрифты для Mac2012-06-07*/#target indesign#targetengine "dotextok"////  var mySpecialChar = '([α-ωäöüÄÖÜß¼½¾])'; // греческие буквы от альфы до омеги и немецкие буквы α-ω,ä,ö,ü,Ä,Ö,Ü,ß,¼,½,¾ в гарнитуре Times New Roman, и знаки дробей////// блок ниже перемещен в файл WordsAndUnits.jsx, чтобы все пользовательские наработки не пропали с появлением новой версии скрипта./*// SpaceLetterNonbreackingSpace - однобуквенные частицы, которые не будут оторваны от следующего словаvar SpaceLetterNonbreackingSpace = "(а|а,|в|и|и,|к|о|с|у|с\\.|т\\.|п\\.|ч\\.|\"О|\"К|В|И|К|О|С|У|А|\"У)"; // NonbreackingSpaceLetterSpace - однобуквенные частицы, которые не будут оторваны от предыдущего словаvar NonbreackingSpaceLetterSpace = "(б|ж)";////// SpaceTwoLetterNonbreackingSpace - двухбуквенные частицы, которые не будут оторваны от следующего словаvar SpaceTwoLetterNonbreackingSpace = "(не|ни|на|ну|ну,|от|об|из|за|да|да,|но|но,|по|до|во|со|ко|та|ту|то|те|см\\.|им\\.|Не|Ни|На|Ну|Ну,|От|Об|Из|За|Да|Да,|Но|Но,|По|До|Во|Со|Ко|Та|Ту|То|Те|См\\.|Им\\.|\"Об)";// NonbreackingSpaceTwoLetterSpace - двухбуквенные частицы, которые не будут оторваны от предыдущего словаvar NonbreackingSpaceTwoLetterSpace = "(ли|же|ль|бы|бы,|же,)";////// привязываемые к числу единицы измерений и названия месяцевmyUnits = "(\\d)( )(руб|ц/га|г[ .,]|кг|мм|дм|см|м[ .,]|км|л[ .,]|В|А|Вт|W|°C|января|февраля|марта|апреля|мая|июня|июля|августа|сентября|октября|ноября|декабря|квартал\.)";/////*/var ProgressBar = function(title) { // ProgressBar     var w = new Window('palette', title, {x:0, y:0, width:700, height:90},{closeButton: false}),          pb = w.add('progressbar', {x:20, y:32, width:660, height:12}),          st = w.add('statictext', {x:20, y:12, width:660, height:20});          ms = w.add('statictext', {x:20, y:52, width:660, height:20});          st.justify = 'left';          w.center();     this.reset = function(msg,maxValue) {          st.text = msg;          pb.value = 0;          pb.maxvalue = maxValue;          pb.visible = maxValue;          w.show();      };     this.info = function(msg)  {          ms.text = msg;          w.show();     };     this.set = function(step) {pb.value = step};     this.close = function() {w.close();};} // ProgressBarmyCurrentVersionData_xx_xx_xx = "19.05.12";var myProgramTitulWholeText = " Подготовка текста к вёрстке " +"(версия " +myCurrentVersionData_xx_xx_xx +" )" ;var myProgramTitulFragment = " Обработка фрагмента текста вёрстки  " +"(версия " +myCurrentVersionData_xx_xx_xx +" )";var myProgramTitul = myProgramTitulWholeText;var myCurrActionNumber = 0;var myNumberOfActions = 0;var myResetOrRename = 0;var mySpecialName;var myStartOfFragment;var myEndOfFragment;myDefSetName = "#DoTextOK.dtok"myWhiteSpace = "\u00A0";myHairSpace = "\u2009";myApostrof =  "\u0027";myChar0x2212 = "\u2212"; // это минус, "забытый" разработчиками раскладки русских букв. Он будет заменен на короткое тире, имеющееся во всех русских гарнитурах//myTireChar  = "—"; // 2014var myFoundSamples;// myInfoColorSample — шаблон цвета для myInfoColorvar myInfoColorSample = [0, 100, 100, 0];var fontSymbol = app.fonts.item("Symbol");myMinusChar  = "–"; // шрифт диалоговvar dialogFont = "Macintosh" == File.fs ? "Lucida Grande" : "Verdana";var myAllSpaces = ["Нет отбивки","Волосяная шпация","Обычный пробел","Фиксированный пробел","Неразрывный пробел","Шпация на 1/6 круглой","Тонкая шпация","Шпация на 1/4 круглой","Шпация на 1/3 круглой","Шпация на точку"];///////////////////////////////////// Индексы массива myAllSpaces// "Нет отбивки" = 0;// "Волосяная шпация" = 1;// "Обычный пробел" = 2;// "Фиксированный пробел" = 3;// "Неразрывный пробел" = 4;// "Шпация на 1/6 круглой" = 5;// "Тонкая шпация" = 6;// "Шпация на 1/4 круглой" 7;// "Шпация на 1/3 круглой" = 8;// "Шпация на точку" = 9;/////////////////////////////////myDiscretionaryHyphen = "\u00AD";myWinWordHyphen = "\u00AC";myNonbreakingHyphen = "\u2011";myWinWordHyphen = "\u00AC";myNonbreakingSpace = "~S";myNonbreakingSpaceFixedWidth = "~s";myThinSpace = "~<";myHairSpace = "~|";myFigureSpace = "~/";myPunctuationSpace = "~.";myThirdSpace = "~3";myQuarterSpace = "~4";mySixSpace = "~%";mySpace = " ";myNoSpace = "";//////////////////////////////////myEnSpace = "\u2002";//////////////////////////////////var myAllSpacesValues = [myNoSpace,myHairSpace,mySpace,myNonbreakingSpaceFixedWidth,myNonbreakingSpace,mySixSpace,myThinSpace,myQuarterSpace,myThirdSpace,myPunctuationSpace];//////////////////////////////////myMultipleReturn = "~b~b+"mySingleReturn = "\r"myMultipleSpaces = "[~m~>~f~|~S~s~<~/~.~3~4~% ]{2,}";myLineOfSpaces = "~m~>~f~|~S~s~<~/~.~3~4~% ";mySingleSpace = " "myMultipleTabs = "[\t]{2,}"///////////////////////////myJobCancelled = false;myClean_value_start = true;c_options_enabled_start = true;//repSpace_value_start = true;repChar_value_start = true;tabs2spaces_value_start = false;hyphens_value_start = true;bull2text_value_start = true;charStyles_value_start = true;digAndChar_value_start = true;oneStyle_value_start = false;rusLang_value_start = true;myTypographica_value_start = true;t_options_enabled_start = true;////----hyplinks_value_start = false;fixOneLetter_value_start = true;fixTwoLetter_value_start = false;fixDigitAndWord_value_start = true;commonTire_value_start = true;minus_value_start = true;myDotOrWithout_value_start = true;//---mlnWithoutPoint_value_start = false;myProcAndPromille_value_start = true;//---slitno_value_start = true;myFootnoteGroup_value_start = true;footnote1_value_start = true;mySpatium_value_start = true;s_options_enabled_start = true;////----tireAndSpatium_value_start = true;mySpaceListBefore_selection_start = 4;mySpaceListAfter_selection_start = 2;commatire_value_start = true;myCommaAndTire_selection_start = 0;shortword_value_start = true;myShortWordSpace_selection_start = 1;initials_value_start = true;myASPushkinFirstSpace_selection_start = 6;myASPushkinSecondSpace_selection_start = 3;myPushkinASFirstSpace_selection_start = 3;myPushkinASSecondSpace_selection_start = 6;myPhone_value_start = false;p_options_enabled_start = true;sevendigits_value_start = false;sixdigits_value_start = false;mySlider_value_start = 100;mySet34_value_start = true;mySet322_value_start = true;SepIsSpace_value_start = false;SepIsDefis_value_start = true;SepIsMinus_value_start = false;grekCharStyles_value_start = true;mySelectedQuotes_value_start = 0;setquotes_value_start = false;myFootnoteGroup_value_start = true;myOneLineIsOneAbzatz_start = false;SearchedDefis_value_start = false;SearchedMinus_value_start = true;SearchedTire_value_start = false;var mySpecialChar_start = '([α-ωäöüÄÖÜß¼½¾])';///===var myOneLineIsOneAbzatz_value;var myClean_value;var c_options_enabled;//var repSpace_value;var repChar_value;var tabs2spaces_value;var hyphens_value;var bull2text_value;var charStyles_value;var digAndChar_value;var oneStyle_value;var rusLang_value;var myTypographica_value;var t_options_enabled;////----var hyplinks_value;var fixOneLetter_value;var fixTwoLetter_value;var fixDigitAndWord_value;var commonTire_value;var minus_value;var myDotOrWithout_value;//---var mlnWithoutPoint_value;var myProcAndPromille_value;//---var myFootnoteGroup_value;var grekCharStyles_value;var slitno_value;var footnote1_value;var mySpatium_value;var s_options_enabled;////----var tireAndSpatium_value;var mySpaceListBefore_selection;var mySpaceListAfter_selection;var commatire_value;var myCommaAndTire_selection;var shortword_value;var myShortWordSpace_selection;var initials_value;var myASPushkinFirstSpace_selection;var myASPushkinSecondSpace_selection;var myPushkinASFirstSpace_selection;var myPushkinASSecondSpace_selection;var myPhone_value;var p_options_enabled;var sevendigits_value;var sixdigits_value;var myPrevSelectedStyle;var mySlider_value;var mySet34_value;var mySet322_value;var SepIsSpace_value;var SepIsDefis_value;var SepIsMinus_value;var SearchedDefis_value;var SearchedMinus_value;var SearchedTire_value;var SepIsDot_value;var myPrevSelectedStyle;var mySelectedQuotes_value;var setquotes_value;var myStyledText = 0;////===================// Переменные, отражающие выбранные параметры работы скрипта// если переменная равна 2, значит, этот параметр сейчас исключён из рассмотрения.// 1 означает, что флажок установлен, 0 -- сброшенvar myCleanValueFromMenu;var repCharFromMenu;var tabs2spacesFromMenu;var hyphensFromMenu;var bull2textFromMenu;var charStylesFromMenu;var grekCharStylesFromMenu;var digAndCharFromMenu;var rusLangFromMenu;var myTypographicaValueFromMenu;var hyplinksFromMenu;var fixOneLetterFromMenu;var fixTwoLetterFromMenu;var fixDigitAndWordFromMenu;var commonTireFromMenu;var minusFromMenu;var mlnWithoutPointFromMenu;var slitnoFromMenu;var footnote1FromMenu;var ParaIndexFromMenu;var tireAndSpatiumFromMenu;var mySpaceListBeforeFromMenu; // indexvar mySpaceListAfterFromMenu;  // indexvar commatireFromMenu;var myCommaAndTireFromMenu;  // indexvar shortwordFromMenu;var myShortWordSpaceFromMenu; // indexvar initialsFromMenu;var myASPushkinFirstSpaceFromMenu; // indexvar myASPushkinSecondSpaceFromMenu; // indexvar myPushkinASFirstSpaceFromMenu;  // indexvar myPushkinASSecondSpaceFromMenu;  // indexvar mySelectedQuotesFromNenu; // indexvar sevendigitsFromMenu;var sixdigitsFromMenu;var mySliderValueFromMenu;var Set34FromMenu;var SepIsSpaceFromMenu;var setquotes_valueFromMenu;var SepIsDefisFromMenu;var SepIsMinusFromMenu;var SepIsDotFromMenu;var mySpatiumValueFromMenu;var myPhoneValueFromMenu;var myOneLineIsOneAbzatzFromMenu;var SearchedDefisFromMenu;var SearchedMinusFromMenu;var SearchedTireFromMenu;var myCurFileWordsAndUnits = "WordsAndUnits.jsx";////======////////////////////////////////////// проверка версии InDesignif (parseInt (app.version) < 6) { // app.version	alert ("Запустите InDesign CS4+ для обработки текста этим скриптом.", myProgramTitul);    exit();} // app.versionif(app.documents.length == 0) { // app.documents.length != 0	alert("Нет открытых документов.", myProgramTitul);		exit();}var mySelection = app.selection[0];var myDocument = app.activeDocument;// масиив объектов внутри которых обрабатывается текстvar processingObjects = [];/// <<< на время отладки...var myWordsAndUnitsiFile = myFile(myCurFileWordsAndUnits);var myIniFile = new File (myWordsAndUnitsiFile);if (myIniFile.exists) {	// прочитаем значения переменных из файла WordsAndUnits	try { 		app.doScript(myIniFile);	} catch (e) {		alert('Синтаксическая ошибка в файле WordsAndUnits.jsx\n' + e.message);		exit();	}} else {	alert("Не найден файл WordsAndUnits.jsx. Он должен быть в \том же каталоге, где размещен этот скрипт.");	exit(); }   /// <<< на время отладки...if(app.selection.length == 0) { // app.selection.length != 0	alert("Перед запуском программы поставьте курсор в текст для подготовки всей \статьи к верстке.\nДля обработки части текста выделите его фрагмент.", 		myProgramTitul);		exit();}// поиск подходящих объектов внутри выделения(function seekStories(items) {	for (var i = items.length; i--; ) {		var item = items[i];		//alert(item.constructor.name);				// анализируем что же выделил пользователь?		switch (item.constructor.name) {			case 'InsertionPoint': // просто курсор внутри текста - не выделено ничего				seekStories([item.parentStory]);				break;						case 'TextFrame':      // выделен текстовый фрейм				seekStories(item.paragraphs);				break;							// выделен фрагмент			case 'Character':			case 'Line':			case 'Text':			case 'TextColumn':			case 'TextStyleRange':			case 'Word':				// расширим выделенную область до кратности абзацам				if (item.paragraphs.length > 0) {					var myStartOfFragment = item.paragraphs.firstItem().characters.firstItem().index;					var myEndOfFragment = item.paragraphs.lastItem().characters.lastItem().index;					item = item.parent.characters.itemByRange(myStartOfFragment, myEndOfFragment);				}				// внимание! дальше выполняется следующий блок case						case 'Paragraph':			case 'Story':				// пропустим пустые				if (item.contents.length > 0) {					processingObjects.push(item);				}				seekStories(item.tables);				// добавим вложенные				seekStories(item.textFrames);				break;						// таблица			case 'Table':				// в таблице обработаем каждую ячейку				seekStories(item.cells);				break;							case 'Cell':				// обработаем все объекты Text				seekStories(item.texts);				break;		}	}})(app.selection);// выход если ничего подходящего не выделеноif (0 == processingObjects.length) {	alert("Перед запуском программы поставьте курсор в текст для подготовки всей статьи к верстке.\nВыделите часть текста для проверки только её.", myProgramTitul);		exit();}//~ // #DoTextOK.dtok - основной файл обработки текстаvar mySetFile;var myScriptFile = myGetScriptPath();var myScriptFolder = decodeURI(myScriptFile.path);var myFilePath = decodeURI(myScriptFolder + "/ " + myDefSetName); //  myDefSetName = #DoTextOK.dtokvar mySetInfoFile = new File (myFilePath);myScrFolder = new Folder (myScriptFile.path);var myDoTextOKList = myScrFolder.getFiles("*.dtok");if (myDoTextOKList.length == 0) { // первый запуск. нет ни одного файла настроек        mySetFile = mySetInfoFile;} //  первый запуск. нет ни одного файла настроекif (myDoTextOKList.length == 1) { //  == 1     mySetFile = myDoTextOKList[0];    } //  == 1if (myDoTextOKList.length > 1) { // > 1var mySetFile = File.openDialog(myProgramTitul, 'Файлы установок обработки текста скриптом DoTextOK: *.dtok');if (mySetFile == null) { mySetFile = mySetInfoFile; }} // > 1var myArrForSplit = [];myArrForSplit = decodeURI(mySetFile).split("/");var myParaFileName = myArrForSplit[myArrForSplit.length-1];if (mySetFile.exists) { //File.existsmySetFile.open("r");myClean_value = mySetFile.readln();c_options_enabled = mySetFile.readln();repChar_value = mySetFile.readln();tabs2spaces_value = mySetFile.readln();hyphens_value = mySetFile.readln();bull2text_value = mySetFile.readln();charStyles_value = mySetFile.readln();digAndChar_value = mySetFile.readln();rusLang_value = mySetFile.readln();myTypographica_value = mySetFile.readln();t_options_enabled = mySetFile.readln();hyplinks_value = mySetFile.readln();fixOneLetter_value = mySetFile.readln();fixTwoLetter_value = mySetFile.readln();fixDigitAndWord_value = mySetFile.readln();commonTire_value = mySetFile.readln();minus_value = mySetFile.readln();mlnWithoutPoint_value = mySetFile.readln();myProcAndPromille_value = mySetFile.readln();slitno_value = mySetFile.readln();myFootnoteGroup_value = mySetFile.readln();footnote1_value = mySetFile.readln();myPrevSelectedStyle = mySetFile.readln();mySpatium_value = mySetFile.readln();s_options_enabled = mySetFile.readln();tireAndSpatium_value = mySetFile.readln();mySpaceListBefore_selection = mySetFile.readln();mySpaceListAfter_selection = mySetFile.readln();mySlider_value = mySetFile.readln();commatire_value = mySetFile.readln();myCommaAndTire_selection = mySetFile.readln();grekCharStyles_value = mySetFile.readln();shortword_value = mySetFile.readln();myShortWordSpace_selection = mySetFile.readln();initials_value = mySetFile.readln();myASPushkinFirstSpace_selection = mySetFile.readln();myASPushkinSecondSpace_selection = mySetFile.readln();myPushkinASFirstSpace_selection = mySetFile.readln();myPushkinASSecondSpace_selection = mySetFile.readln();setquotes_value = mySetFile.readln();var myUniLine = mySetFile.readln(); // считана строка в записи данных формате юникод. Значения разделены запятой// Теперь их надо из текстового вида перевести в знаковый и поместить в mySpecialChar var myUniArr = [];myUniArr = myUniLine.split(',');var myNewCharLine = "";for (j = 0; j < myUniArr.length; j++) { ///    myNewCharLine += String.fromCharCode(myUniArr[j]);     } ///mySpecialChar = myNewCharLine;myPhone_value = mySetFile.readln();p_options_value = mySetFile.readln();sevendigits_value = mySetFile.readln();sixdigits_value = mySetFile.readln();mySet34_value = mySetFile.readln();mySet322_value = mySetFile.readln();SepIsSpace_value = mySetFile.readln();SepIsDefis_value = mySetFile.readln();SepIsMinus_value = mySetFile.readln();SepIsDot_value = mySetFile.readln();myOneLineIsOneAbzatz_value = mySetFile.readln();SearchedDefis_value = mySetFile.readln();SearchedMinus_value = mySetFile.readln();SearchedTire_value = mySetFile.readln();mySetFile.close();} // File existselse { // не найден файл с установкамиmySetDefaultValues();} // не найден файл с установками/////////////////// *** выбор параметров замены ***var myCleanValue;myClean_value == true ? myCleanValue = 1 : myCleanValue = 0;var myTypoValue;myTypographica_value == true ? myTypoValue = 1 : myTypoValue = 0;var mySpatiumValue;mySpatium_value == true ? mySpatiumValue = 1 : mySpatiumValue = 0;var myPhoneValue;myPhone_value == true ? myPhoneValue = 1 : myPhoneValue = 0;var myWin = myScriptWindow();if (myWin.show() == 2) exit(); // ==2  -- это щелчок на красном крестике в правом верхнем угле окна//=================function myScriptWindow() { // myScriptWindow//var w = new Window ("dialog", "Подготовка текста к вёрстке" + "  [ " + myParaFileName + " ]", undefined); // var w = new Window ("dialog", "Подготовка текста к вёрстке" + "  [ " + myParaFileName + " ]", undefined, {closeButton: true});//var w = new Window ("palette", "Подготовка текста к вёрстке", undefined); // w.alignChildren = "right";var tpanel = w.add ("tabbedpanel");tpanel.alignChildren = ["fill", "fill"];tpanel.preferredSize = [350,250];//===========================================var clean = tpanel.add ("tab", undefined, "Чистка текста");clean.alignChildren = "left";var myClean = clean.add ("checkbox", undefined, "Выполнить выбранные операции");myClean_value == 1 ? myClean.value = true : myClean.value = false;var c_options = clean.add ("panel", undefined, "");c_options.alignChildren = ["fill", "fill"];infoAboutFootnotes = c_options.add ("checkbox", [0,0,585,20], "Убедитесь, что число сносок в файле такое же, как и в переданном на вёрстку тексте");separator_f = c_options.add ("panel"); // Помещаем на экран горизонтальную линию.  Для программы этот параметр высота, но по сути это ширина линииseparator_f.minimumSize.height = separator_f.maximumSize.height = 1;repChar = c_options.add ("checkbox", undefined, "Удалить повторяющиеся символы перевода строки");repChar_value == 1 ? repChar.value = true : repChar.value = false;tabs2spaces = c_options.add ("checkbox", undefined, "Заменить символы табуляции на пробелы");tabs2spaces_value == 1 ? tabs2spaces.value = true : tabs2spaces.value = false;hyphens = c_options.add ("checkbox", undefined, "Удалить в тексте символы переносов");hyphens_value == 1 ? hyphens.value = true : hyphens.value = false;digAndChar = c_options.add ("checkbox", undefined, "Привести в порядок наращение чисел (исправить '1-ых' на '1-х', '2-ого' на '2-го' и т.п.)");digAndChar_value == 1 ? digAndChar.value = true : digAndChar.value = false;hyplinks = c_options.add ("checkbox", undefined, "Удалить гиперссылки из текста");hyplinks_value == 1 ? hyplinks.value = true : hyplinks.value = false;setquotes = c_options.add ("checkbox", undefined, "Кавычки в тексте в соответствии с установками языка первого абзаца статьи");setquotes_value == 1 ? setquotes.value = true : setquotes.value = false;myOneLineIsOneAbzatz = c_options.add ("checkbox", undefined, "Текст в формате 'одна строка - один абзац'");myOneLineIsOneAbzatz_value == 1 ? myOneLineIsOneAbzatz.value = true : myOneLineIsOneAbzatz.value = false;separator_c1 = c_options.add ("panel"); // Помещаем на экран горизонтальную линию Для программы этот параметр высота, но по сути это ширина линииseparator_c1.minimumSize.height = separator_c1.maximumSize.height = 1;var myTireAndSeparatorGroup = c_options.add ("group");myTireAndSeparatorGroup.orientation = "row";myTireAndSeparatorGroup.alignChildren = "left";var TireGroup = myTireAndSeparatorGroup.add ("group");TireGroup.orientation = "column";TireGroup.alignChildren = "left";TireGroup.add ("statictext", undefined, "Тире в тексте");var commonTire = TireGroup.add ("radiobutton", undefined, "Длинное тире");commonTire_value == 1 ? commonTire.value = true : commonTire.value = false;var shortTire = TireGroup.add ("radiobutton", undefined, "Короткое тире (минус)");shortTire.value = !commonTire.value;//---var myEmptyGroup = myTireAndSeparatorGroup.add ("group");myEmptyGroup.orientation = "column";myEmptyGroup.alignChildren = "left";myEmptyGroup.add ("statictext", [0,0,90,10], "");//---var mySeparatorGroup = myTireAndSeparatorGroup.add ("group");mySeparatorGroup.orientation = "column";mySeparatorGroup.alignChildren = "left";mySeparatorGroup.add ("statictext", undefined, "Разделитель цифр в интервалах дат и чисел");var myDigitAndYearDivisionRadioGroup = mySeparatorGroup.add ("group");myDigitAndYearDivisionRadioGroup.orientation = "column";myDigitAndYearDivisionRadioGroup.alignChildren = "left";var minus = myDigitAndYearDivisionRadioGroup.add ("radiobutton", undefined, "Минус");minus_value == 1 ? minus.value = true : minus.value = false;var tire = myDigitAndYearDivisionRadioGroup.add ("radiobutton", undefined, "Тире");tire.value = !minus.value;separatorS = c_options.add ("panel"); // Помещаем на экран горизонтальную линиюseparatorS.minimumSize.height = separatorS.maximumSize.height = 1;var myMlnGroup = c_options.add ("group");myMlnGroup.orientation = "row";myMlnGroup.alignChildren = "left";myMlnGroup.add ("statictext", undefined, "Вариант сокращения: с точкой или без точки");myDotOrNot = myMlnGroup.add ("group");myDotOrNot.orientation = "row";myDotOrNot.alignChildren = "left";var mlnWithoutPoint = myDotOrNot.add ("radiobutton", undefined, "млн, млрд, трлн");var mlnWithPoint = myDotOrNot.add ("radiobutton", undefined, "млн., млрд., трлн.");mlnWithoutPoint_value == 1 ? mlnWithoutPoint.value = true : mlnWithoutPoint.value = false;mlnWithPoint.value = !mlnWithoutPoint.value;//=============================================var typo = tpanel.add ("tab", undefined, "Оформление текста");typo.alignChildren = "left";var myTypographica = typo.add ("checkbox", undefined, "Выполнить выбранные операции");myTypographica_value == 1 ? myTypographica.value = true : myTypographica.value = false;var t_options = typo.add ("panel", undefined, "");t_options.alignChildren = ["fill", "fill"];var myHypAndQuotesGroup = t_options.add ("group"); myHypAndQuotesGroup.alignChildren = ["fill", "fill"];myHypAndQuotesGroup.orientation = "row";fixOneLetter = t_options.add ("checkbox", undefined, "Запретить отрывать однобуквенные предлоги (частицы, союзы) от слов");fixOneLetter_value == 1 ? fixOneLetter.value = true : fixOneLetter.value = false;fixTwoLetter = t_options.add ("checkbox", undefined, "Запретить отрывать двухбуквенные предлоги (частицы, союзы) от слов");fixTwoLetter_value == 1 ? fixTwoLetter.value = true : fixTwoLetter.value = false;fixDigitAndWord = t_options.add ("checkbox", undefined, "Неразрывный пробел между цифрой и названием месяца или единицей измерения");bull2text = t_options.add ("checkbox", undefined, "Преобразовать буллиты и нумерацию в текст");bull2text_value == 1 ? bull2text.value = true : bull2text.value = false;fixDigitAndWord_value == 1 ? fixDigitAndWord.value = true : fixDigitAndWord.value = false;charStyles = t_options.add ("checkbox", undefined, "Создать символьные стили для курсива, полужирного, верхнего и нижнего индексов");charStyles_value == 1 ? charStyles.value = true : charStyles.value = false;grekCharStyles = t_options.add ("checkbox", undefined, "Создать символьный стиль для специальных знаков и букв других алфавитов");grekCharStyles_value == 1 ? grekCharStyles.value = true : grekCharStyles.value = false;var mySpecCharLine = t_options.add ("edittext", undefined, mySpecialChar);mySpecCharLine.characters = 30;mySpecCharLine.active = false;//---separator4 = t_options.add ("panel"); // Помещаем на экран горизонтальную линию Для программы этот параметр высота, но по сути это ширина линииseparator4.minimumSize.height = separator4.maximumSize.height = 1;//--- var myFootnoteProcessing = t_options.add ("group");   myFootnoteProcessing.alignChildren = ["fill", "fill"];myFootnoteProcessing.orientation = "column";var myFootnoteGroup = myFootnoteProcessing.add ("checkbox",undefined, "Когда рядом запятая или точка и знак сноски — ");myFootnoteGroup_value == 1 ? myFootnoteGroup.value = true : myFootnoteGroup.value = false;var footnoteselection  = myFootnoteProcessing.add ("group");footnoteselection.orientation = "row";var footnote1 = footnoteselection.add ("radiobutton", undefined, "...знак сноски перед знаком пунктуации");var footnote2 = footnoteselection.add ("radiobutton", undefined, "...сначала точка или запятая, затем знак сноски");footnote1_value == 1 ? footnote1.value = true : footnote1.value = false;footnote2.value = !footnote1.value;footnoteselection.enabled = myFootnoteGroup.value;separator_t2 = t_options.add ("panel"); // Помещаем на экран горизонтальную линиюseparator_t2.minimumSize.height = separator_t2.maximumSize.height = 1;var myInfoAboutStyleGroup = t_options.add ("group");myInfoAboutStyleGroup.alignChildren = "left";myInfoAboutStyleGroup.orientation = "row";var myParaStyleNames = new Array;var myStyleNameLength = 0;for (i=0; i< myDocument.paragraphStyles.length; i++) {     myParaStyleNames.push(myDocument.paragraphStyles.item(i).name) ;  // перечень всех стилей документа, включая неотображаемый в панели Paragraphs вариант сброса всех стилей myDocument.paragraphStyles.item(0).name =  [No Paragraph Style]    if (myDocument.paragraphStyles.item(i).name.length > myStyleNameLength) myStyleNameLength = myDocument.paragraphStyles.item(i).name.length;    }var myStyleIndex;for (j = 0; j < myParaStyleNames.length; j++) { // myParaStyleNames.length    if ( myParaStyleNames[j] == myPrevSelectedStyle) break;    } // myParaStyleNames.lengthif (j < myParaStyleNames.length) myStyleIndex = j;else myStyleIndex = 1; // единица -- это индекс стиля Basic Paragraphvar oneStyle = myInfoAboutStyleGroup.add ("checkbox", undefined, "Присвоить тексту один стиль:");oneStyle.value = false;var myList = myInfoAboutStyleGroup.add ("dropdownlist", [0,0,myStyleNameLength*7,25], myParaStyleNames, {multiselect: false}); myList.selection = myStyleIndex; oneStyle.value == false ? myList.enabled = false : myList.enabled = true;rusLang = t_options.add ("checkbox", undefined, "Присвоить тексту после обработки атрибут 'Русский язык'");rusLang_value == 1 ? rusLang.value = true : rusLang.value = false;//==============================================var spatium = tpanel.add ("tab", undefined, "Шпации в тексте");spatium.alignChildren = "left";var mySpatium= spatium.add ("checkbox", undefined, "Выполнить выбранные операции");mySpatium_value == 1 ? mySpatium.value = true : mySpatium.value = false;var s_options = spatium.add ("panel", undefined, "");s_options.alignChildren = ["fill", "fill"];//---var myTireGroup = s_options.add ("group");myTireGroup.alignChildren = "left";myTireGroup.orientation = "column";var myTireAndSpatiumInfo = myTireGroup.add ("group");myTireAndSpatiumInfo.alignChildren = "left";myTireAndSpatiumInfo.orientation = "row";var tireAndSpatium= myTireAndSpatiumInfo.add ("checkbox", undefined, "Шпации до и после тире:"); tireAndSpatium_value == 1 ? tireAndSpatium.value = true : tireAndSpatium.value = false;var myTireSpatiumGroup = myTireAndSpatiumInfo.add ("group");myTireSpatiumGroup.orientation = "row";var mySpaceListBefore = myTireSpatiumGroup.add ("dropdownlist", undefined, myAllSpaces, {multiselect: false}); var s = myTireSpatiumGroup.add ("statictext", [0,0,10,20], "—");var mySpaceListAfter = myTireSpatiumGroup.add ("dropdownlist", undefined, myAllSpaces, {multiselect: false}); mySpaceListBefore.selection = mySpaceListBefore_selection;mySpaceListAfter.selection = mySpaceListAfter_selection;var mySpaceListBeforeIndex = mySpaceListBefore.selection.index;var mySpaceListAfterIndex = mySpaceListAfter.selection.index;var mySliderGroup = myTireGroup.add ("group");mySliderGroup.alignChildren = "left";mySliderGroup.orientation = "row";mySliderGroup.add ("statictext", undefined, "Сжатие шпаций обрамляющих тире, от 0 до 100%");var SliderStartValue = mySlider_value;  //mySliderValueFromMenu; mySlider_valuevar mySpaceProc = mySliderGroup.add ("edittext", [0,0,35,20], SliderStartValue);mySpaceProc.enabled = false;var s2 = mySliderGroup.add ("statictext", [0,0,5,20], "");var slider = mySliderGroup.add("slider", [0,0,175,20], SliderStartValue,0,100);slider.onChanging = function () {mySpaceProc.text = slider.value} //---myTireSpatiumGroup.enabled = tireAndSpatium.value;mySliderGroup.enabled = tireAndSpatium.value;separatorL = s_options.add ("panel"); // Помещаем на экран горизонтальную линиюseparatorL.minimumSize.height = separatorL.maximumSize.height = 1;var myCommaAndTireGroup = s_options.add ("group");myCommaAndTireGroup.alignChildren = ["fill", "fill"];myCommaAndTireGroup.orientation = "column";var myCommaAndTireGroup1 = myCommaAndTireGroup.add ("group");myCommaAndTireGroup1.alignChildren = "left";myCommaAndTireGroup1.orientation = "row";var commatire= myCommaAndTireGroup1.add ("checkbox", undefined, "Между запятой, точкой, многоточием и тире:");commatire_value == 1 ? commatire.value = true : commatire.value = false;var myCommaAndTire = myCommaAndTireGroup1.add ("dropdownlist", undefined, myAllSpaces, {multiselect: false}); myCommaAndTire.selection = myCommaAndTire_selection;var myCommaAndTireIndex;commatire.value == false ? myCommaAndTire.enabled = false : myCommaAndTire.enabled = true;//---var myCommaAndTireGroup2 = myCommaAndTireGroup.add ("group");myCommaAndTireGroup2.orientation = "row";myCommaAndTireGroup2.alignChildren = "left";var shortword= myCommaAndTireGroup2.add ("checkbox", undefined, "В составных сокращениях (т.д., т.е., т.к., ...):");shortword_value == 1 ? shortword.value = true : shortword.value = false;var myShortWordSpace = myCommaAndTireGroup2.add ("dropdownlist", undefined, myAllSpaces, {multiselect: false}); myShortWordSpace.selection = myShortWordSpace_selection;var myShortWordSpaceIndex;shortword.value == false ? myShortWordSpace.enabled = false : myShortWordSpace.enabled = true;//---   separator3 = s_options.add ("panel"); // Помещаем на экран горизонтальную линиюseparator3.minimumSize.height = separator3.maximumSize.height = 1;var myFIOGroup = s_options.add ("group");myFIOGroup.alignChildren = ["fill", "fill"];myFIOGroup.orientation = "column";var initials= myFIOGroup.add ("checkbox", undefined, "Шпации в инициалах");initials_value == 1 ? initials.value = true : initials.value = false;var myASPushkin = myFIOGroup.add ("group");myASPushkin.orientation = "row";myASPushkin.add ("statictext", undefined, "А.");var myASPushkinFirstSpace = myASPushkin.add ("dropdownlist", undefined, myAllSpaces, {multiselect: false}); myASPushkinFirstSpace.selection = myASPushkinFirstSpace_selection;myASPushkin.add ("statictext", undefined, "C.");var myASPushkinSecondSpace = myASPushkin.add ("dropdownlist", undefined, myAllSpaces, {multiselect: false}); myASPushkinSecondSpace.selection = myASPushkinSecondSpace_selection;myASPushkin.add ("statictext", undefined, " Пушкин");var myPushkinAS = myFIOGroup.add ("group");myPushkinAS.orientation = "row";myPushkinAS.add ("statictext", undefined, "Пушкин");var myPushkinASFirstSpace = myPushkinAS.add ("dropdownlist", undefined, myAllSpaces, {multiselect: false});  myPushkinASFirstSpace.selection = myPushkinASFirstSpace_selection;myPushkinAS.add ("statictext", undefined, "А.");var myPushkinASSecondSpace = myPushkinAS.add ("dropdownlist", undefined, myAllSpaces, {multiselect: false}); myPushkinASSecondSpace.selection = myPushkinASSecondSpace_selection;myPushkinAS.add ("statictext", undefined, "С.");myASPushkinFirstSpace.enabled = initials.value; myASPushkinSecondSpace.enabled = initials.value;myPushkinASFirstSpace.enabled = initials.value;myPushkinASSecondSpace.enabled = initials.value;separator4 = s_options.add ("panel"); // Помещаем на экран горизонтальную линиюseparator4.minimumSize.height = separator4.maximumSize.height = 1;var myProcGroup = s_options.add ("group");myProcGroup.orientation = "column";myProcGroup.alignChildren = ["fill", "fill"];var myProcAndPromille = myProcGroup.add ("checkbox", undefined, "Знаки процента и промилле —");myProcAndPromille_value == 1 ? myProcAndPromille.value = true : myProcAndPromille.value = false;myProcRadioGroup = myProcGroup.add ("group");myProcRadioGroup.orientation = "row";myProcRadioGroup.alignChildren = ["fill", "fill"];var slitno = myProcRadioGroup.add ("radiobutton", undefined, "…ставятся без отбивки от числа");var plusotbivka = myProcRadioGroup.add ("radiobutton", undefined, "…отбиваются от числа тонкой шпацией");slitno_value == 1 ? slitno.value = true : slitno.value = false;plusotbivka.value = !slitno.value;myProcAndPromille.value == false ? myProcRadioGroup.enabled = false : myProcRadioGroup.enabled = true;//==========================var phone = tpanel.add ("tab", undefined, "Обработка телефонных номеров");phone.alignChildren = "left";var myPhone = phone.add ("checkbox", undefined, "Выполнить выбранные операции");myPhone_value == 1 ? myPhone.value = true : myPhone.value = false;var p_options = phone.add ("panel", undefined, "");//p_options.alignChildren = "left";p_options.alignChildren = ["fill", "fill"];var sevendigitsSetGroup = p_options.add ("group");sevendigitsSetGroup.alignChildren = "left";sevendigitsSetGroup.orientation = "column";sevendigits = sevendigitsSetGroup.add ("checkbox", [0,0,575,20], "Искать в тексте семизначные номера телефонов");var sevendigitsFormatGroup = sevendigitsSetGroup.add ("group");sevendigitsFormatGroup.alignChildren = "left";sevendigitsFormatGroup.orientation = "column";sevendigitsFormatGroup.add ("statictext", undefined, "Формат написания семизначных номеров");var sevendigitsRadioGroup = sevendigitsFormatGroup.add ("group");sevendigitsRadioGroup.alignChildren = "left";sevendigitsRadioGroup.orientation = "row";var mySet34 = sevendigitsRadioGroup.add ("checkbox", undefined, "XXX-XXXX");mySet34_value == 1 ? mySet34.value = true : mySet34.value = false;var mySet322 = sevendigitsRadioGroup.add ("checkbox", undefined, "XXX-XX-XX");mySet322_value == 1 ? mySet322.value = true : mySet322.value = false;sevendigits_value == 1 ? sevendigitsFormatGroup.enabled = true : sevendigitsFormatGroup.enabled = false;sevendigits_value == 1 ? sevendigits.value = true : sevendigits.value = false;sixdigits = p_options.add ("checkbox", undefined, "Искать в тексте шестизначные номера телефонов (формат ХХ-ХХ-ХХ)");sixdigits_value == 1 ? sixdigits.value = true : sixdigits.value = false;///var SearchedSeparator =  p_options.add ("group");SearchedSeparator.alignChildren = "left";SearchedSeparator.orientation = "row";MesssageAboutSearchedNmbrs = SearchedSeparator.add ("statictext", undefined, "Разделитель групп цифр в обрабатываемых номерах:");var SearchedDefis = SearchedSeparator.add ("radiobutton", undefined, "Дефис");SearchedDefis_value == 1 ? SearchedDefis.value = true : SearchedDefis.value = false;var SearchedMinus = SearchedSeparator.add ("radiobutton", undefined, "Минус");SearchedMinus_value == 1 ? SearchedMinus.value = true : SearchedMinus.value = false;var SearchedTire = SearchedSeparator.add ("radiobutton", undefined, "Тире");SearchedTire_value == 1 ? SearchedTire.value = true : SearchedTire.value = false;///separatorP = p_options.add ("panel"); // Помещаем на экран горизонтальную линиюseparatorP.minimumSize.height = separatorP.maximumSize.height = 1;var NumberSeparator =  p_options.add ("group");NumberSeparator.alignChildren = "left";NumberSeparator.orientation = "row";MesssageAboutSep = NumberSeparator.add ("statictext", undefined, "Разделитель групп цифр в обработанных номерах:");var SepIsSpace = NumberSeparator.add ("radiobutton", undefined, "Пробел");SepIsSpace_value == 1 ? SepIsSpace.value = true : SepIsSpace.value = false;var SepIsDefis = NumberSeparator.add ("radiobutton", undefined, "Дефис");SepIsDefis_value == 1 ? SepIsDefis.value = true : SepIsDefis.value = false;var SepIsMinus = NumberSeparator.add ("radiobutton", undefined, "Минус");SepIsMinus_value == 1 ? SepIsMinus.value = true : SepIsMinus.value = false;var SepIsDot = NumberSeparator.add ("radiobutton", undefined, "Точка");SepIsDot_value == 1 ? SepIsDot.value = true : SepIsDot.value = false;//===============================================var myAllButtonsAndCopyrightInfo = w.add ("panel");var buttonsAndCopyright = myAllButtonsAndCopyrightInfo.add ("group");buttonsAndCopyright.orientation = "row";buttonsAndCopyright.alignChildren = ["fill", "fill"];//var myOkAndCancelButtons = buttonsAndCopyright.add ("group",[0,0,225,30],"");var myOkAndCancelButtons = buttonsAndCopyright.add ("group");myOkAndCancelButtons.orientation = "column";myOKButon = myOkAndCancelButtons.add ("button", [0,0,100,30], "Обработать", {name: "ok"});myCancelButon = myOkAndCancelButtons.add ("button", [0,0,100,30], "В другой раз", {name: "cancel"});var myCopyrightInfo = buttonsAndCopyright.add("group", [0,0,400,30] ); // {x:20, y:32, width:660, height:12}     [0,0,400,30]      {x:0, y:20, width:400, height:30}//var myCopyrightInfo = buttonsAndCopyright.add("group");myCopyrightInfo.orientation = "column";//myCopyrightInfo.alignChildren = ["fill", "fill"];myCopyrightInfo.alignChildren = "center";var myMessage = myCopyrightInfo.add ("statictext");var myMessage1 = myCopyrightInfo.add ("statictext");var myMessage2 = myCopyrightInfo.add ("statictext");myMessage.text = "";myMessage1.text = "DoTextOK (" + myCurrentVersionData_xx_xx_xx + ") | © Михаил Иванюшин | adobeindesign.ru";myMessage2.text = "";myMessage.graphics.font = dialogFont + ":10";myMessage.graphics.foregroundColor = myMessage.graphics.newPen (myMessage.graphics.PenType.SOLID_COLOR, [0, 0,1, 1], 1);myMessage1.graphics.font = dialogFont + ":11";myMessage1.graphics.foregroundColor = myMessage1.graphics.newPen (myMessage1.graphics.PenType.SOLID_COLOR, [0, 0,1, 1], 1);myMessage2.graphics.font = dialogFont + ":10";myMessage2.graphics.foregroundColor = myMessage1.graphics.newPen (myMessage1.graphics.PenType.SOLID_COLOR, [0, 0,1, 1], 1);var myResAndSave = buttonsAndCopyright.add ("group"); myResAndSave.orientation = "column";myReset = myResAndSave.add ("button", [0,0,100,30], "Сброс");mySaveButon = myResAndSave.add ("button", [0,0,100,30], "Сохранить");if (myCleanValue == 0)  { myClean.value = false; c_options.enabled = false;  myOKButtonState();}if (myCleanValue == 1)  { myClean.value = true; c_options.enabled = true;  myOKButtonState();}if (myTypoValue == 0)  { myTypographica.value = false; t_options.enabled = false;  myOKButtonState();}if (myTypoValue == 1)  { myTypographica.value = true; t_options.enabled = true;  myOKButtonState();}if (myPhoneValue == 0)  { myPhone.value = false; p_options.enabled = false;  myOKButtonState();}if (myPhoneValue == 1)  { myPhone.value = true; p_options.enabled = true;   myOKButtonState();}if (mySpatiumValue == 0)  { mySpatium.value = false; s_options.enabled = false;   myOKButtonState();}if (mySpatiumValue == 1)  { mySpatium.value = true; s_options.enabled = true; myOKButtonState();}///////////////////////////////////////////////////////myClean.onClick = function () { // myClean.onClick	c_options.enabled = myClean.value;	myOKButtonState();} // myClean.onClick/////////////////////////////////////oneStyle.onClick = function () { // oneStyle.onClick   	myList.enabled = oneStyle.value;} // oneStyle.onClick////////////////////////////////////hyplinks.onClick =        myOKButtonState;setquotes.onClick =       myOKButtonState;fixOneLetter.onClick =    myOKButtonState;fixTwoLetter.onClick =    myOKButtonState;fixDigitAndWord.onClick = myOKButtonState;bull2text.onClick =       myOKButtonState;charStyles.onClick =      myOKButtonState;////////////////////////////////////tireAndSpatium.onClick = function () { // tireAndSpatium.onClick    	tireAndSpatium_value = tireAndSpatium.value ? 1 : 0; 	myTireSpatiumGroup.enabled = tireAndSpatium.value;	mySliderGroup.enabled = tireAndSpatium.value; 	myOKButtonState();} // tireAndSpatium.onClick////////////////////////////////////commatire.onClick = function () { // commatire.onClick    	commatire_value = commatire.value ? 1 : 0; 	myCommaAndTire.enabled = commatire.value;	myOKButtonState();} // commatire.onClick///////////////////////////myPhone.onClick = function () { // myPhone.onClick	p_options.enabled = myPhone.value	myOKButtonState();} // myPhone.onClick//////////////////////////initials.onClick = function () { // initials.onClick        initials_value = initials.value ? 1 : 0;     myASPushkinFirstSpace.enabled = initials.value;     myASPushkinSecondSpace.enabled = initials.value;    myPushkinASFirstSpace.enabled = initials.value;    myPushkinASSecondSpace.enabled = initials.value;		myOKButtonState();} // initials.onClick////////////////////////////////////shortword.onClick = function () { // shortword.onClick    	shortword_value = shortword.value ? 1 : 0; 	myShortWordSpace.enabled = shortword.value;	myOKButtonState();} // shortword.onClick///////////////////////////////////myProcAndPromille.onClick = function () { // myProcAndPromille.onClick    	myProcAndPromille_value = myProcAndPromille.value ? 1 : 0; 	myProcRadioGroup.enabled = myProcAndPromille.value;	myOKButtonState();} // myProcAndPromille.onClick////////////////////////////////////grekCharStyles.onClick = function () { // grekCharStyles.onClick	grekCharStyles_value = grekCharStyles.value ? 1 : 0; 	grekCharStyles.value = grekCharStyles.value;	mySpecCharLine.enabled = grekCharStyles.value;	myOKButtonState();} // grekCharStyles.onClick//////////////////////////////////myFootnoteGroup.onClick = function () { // myFootnoteGroup.onClick    	myFootnoteGroup_value = myFootnoteGroup.value ? 1 : 0; 	footnoteselection.enabled = myFootnoteGroup.value;	myOKButtonState();} // myFootnoteGroup.onClick///////////////////////////////////myTypographica.onClick = function () { // myTypographica.onClick	t_options.enabled = myTypographica.value;	myOKButtonState();} // myTypographica.onClick////////////////////////////////////////////////////mySpatium.onClick = function () { //mySpatium.onClick	s_options.enabled = mySpatium.value;	myOKButtonState();} // mySpatium.onClick////////////////////////////////////////////////////w.addEventListener('mouseout', leaveTestPalette);///-- http://forums.adobe.com/message/3462710#3462710function leaveTestPalette(/*MouseEvent*/mev) {	if( mev.target instanceof Window ) app.activate();}///mySaveButon.onClick = function() { // mySaveButon.onClick 	var myDateF = new Date;	var myDayF = myDateF.getDate();	if (myDayF < 10) myDayF = "0" + myDayF;	var myMonthF = myDateF.getMonth();	myMonthF++; // январь имеет индекс 0	if (myMonthF < 10) myMonthF = "0" + myMonthF;	var myHourF = myDateF.getHours();	if (myHourF < 10) myHourF = "0" + myHourF;	var myMinuteF = myDateF.getMinutes();	if (myMinuteF < 10) myMinuteF = "0" + myMinuteF;	var mySecondeF = myDateF.getSeconds();	if (mySecondeF < 10) mySecondeF = "0" + mySecondeF;	///		mySpecialName = "DoTextOK" + "@" + myDayF + "." + myMonthF + 		"-" + myHourF + "." + myMinuteF + "." + mySecondeF + ".dtok";	var myNameTmp = prompt("Дайте этому файлу установок осмысленное имя.\n\Сейчас имя указывает на дату и время нажатия\nна клавишу 'Сохранить'\n\Для отказа от сохранения установок нажмите клавишу 'Cancel'.", 		mySpecialName, myProgramTitulWholeText);	if (myNameTmp == null || myNameTmp.length == 0) return;	if (myNameTmp.indexOf('.dtok') == -1) myNameTmp += '.dtok';	mySpecialName = myNameTmp;	var myFilePathSave= decodeURI(myScriptFolder + "/" + mySpecialName);	var mySetInfoFileSave = new File (myFilePathSave);	mySaveInfoFile(mySetInfoFileSave);	myResetOrRename = 2; 	alert ("Выбранные установки сохранены в файле\n" + 		mySpecialName, myProgramTitulWholeText);} // mySaveButon.onClick///myOKButon.onClick = function() { // myOKButon.onClick 	mySaveInfoFile(mySetInfoFile);	w.close();} // myOKButon.onClick////////////////infoAboutFootnotes.onClick = function () { // infoAboutFootnotes.onClick	if  (infoAboutFootnotes.value != false)  { // infoAboutFootnotes.value != false		var myParent = mySelection.parent;				if (myParent.constructor.name != "Story") {			alert ("Должен быть выбран основной текст, а не сноска или содержимое таблиц (" + 				myParent.constructor.name + ").", myProgramTitulWholeText);			infoAboutFootnotes.value = false;			return;		}		infoAboutFootnotes.value = true;		var myFootnotesNumber = myParent.footnotes.length;  				if  (myFootnotesNumber == 0) {			alert ("\nВ тексте сносок нет.", myProgramTitulWholeText);		}		else {			alert ("В тексте есть сноски, их число — " + myFootnotesNumber + 				".\nПрежде чем приступать к работе с текстом, убедитесь,\n\что в вёрстку попали все сноски из импортированного файла.", myProgramTitulWholeText);		}	} // infoAboutFootnotes.value != false	else { // else		infoAboutFootnotes.value = false;		alert ("С момента последнего вывода информации о сносках в этом тексте \их там не прибавилось! :-))", myProgramTitulWholeText);          	} // else} // infoAboutFootnotes.onClick////////////////sevendigits.onClick = function () { // sevendigits.onClick    	sevendigits_value = sevendigits.value ? 1 : 0; 	sevendigitsFormatGroup.enabled = sevendigits.value;	NumberSeparator.enabled = !(!sevendigits.value && !sixdigits.value);	SearchedSeparator.enabled = NumberSeparator.enabled; 	myOKButtonState();} // sevendigits.onClick ///////////////sixdigits.onClick = function () { // sevendigits.onClick 	sixdigits_value = sixdigits.value ? 1 : 0;	NumberSeparator.enabled = !(!sevendigits.value && !sixdigits.value);	SearchedSeparator.enabled = NumberSeparator.enabled; 	myOKButtonState();} // sevendigits.onClick ///////////////myReset.onClick = function() { // myReset.onClick	mySetDefaultValues();	myResetSettings();	myOKButtonState(); 	myResetOrRename = 1;	alert ("Установки программы сброшены", myProgramTitulWholeText);} // myReset.onClick////////////////////function myOKButtonState() { // myOKButtonState     var CTSP, p_opt, t_opt, s_opt, c_state, t_state, s_state, p_state, CTS, CTP, CPS, TSP;if (sevendigits.value == false && sixdigits.value == false) p_opt = false; else p_opt = true;if (myProcAndPromille.value == false && tireAndSpatium.value == false && commatire.value == false && shortword.value == false  && initials.value == false) s_opt = false; else s_opt = true;if (fixOneLetter.value == false  && fixTwoLetter.value == false && fixDigitAndWord.value == false &&myFootnoteGroup.value == false && bull2text.value == false && charStyles.value == false && grekCharStyles.value == false) t_opt = false; else t_opt = true;c_state = !myClean.value; //  == true, если: 1) флажок "Выполнить выбранные операции" не установлен 2) флажок "Выполнить выбранные операции" установлен, но ни одна операцияя не выбрана t_state = (myTypographica.value == false) || (myTypographica.value == true && t_opt == false);s_state = (mySpatium.value == false) || (mySpatium.value == true && s_opt == false);p_state = myPhone.value == false || (myPhone.value == true && p_opt == false);if ((c_state != true) || (s_state == !true) || (t_state == !true) || (p_state == !true) ||(c_options.enabled == true) || (t_options.enabled == true &&  t_opt == true)  || (s_options.enabled == true  &&  s_opt == true)  || (p_options.enabled == true  &&  p_opt == true)){ myOKButon.enabled = true; mySaveButon.enabled = true;} else { myOKButon.enabled = false; mySaveButon.enabled = false;} } // myOKButtonState///////////////////function myResetSettings() { // myResetSettingsmyClean.value = myClean_value;c_options.enabled = c_options_enabled;repChar.value = repChar_value;myOneLineIsOneAbzatz.value = myOneLineIsOneAbzatz_value;tabs2spaces.value = tabs2spaces_value;hyphens.value = hyphens_value;bull2text.value =bull2text_value;charStyles.value = charStyles_value ;digAndChar.value = digAndChar_value;oneStyle.value =  oneStyle_value;oneStyle.value == false ? myList.enabled = false : myList.enabled = true;rusLang.value =rusLang_value;myTypographica.value =myTypographica_value;t_options.enabled = t_options_enabled;hyplinks.value = hyplinks_value;fixOneLetter.value = fixOneLetter_value;fixTwoLetter.value = fixTwoLetter_value;fixDigitAndWord.value = fixDigitAndWord_value;commonTire.value = commonTire_value;minus.value = minus_value;mlnWithoutPoint.value = mlnWithoutPoint_value;mlnWithPoint.value = !mlnWithoutPoint.value;myProcAndPromille.value = myProcAndPromille_value;myProcRadioGroup.enabled = myProcAndPromille.value;slitno.value = slitno_value;myFootnoteGroup_value = myFootnoteGroup.value ? 1 : 0; footnoteselection.enabled = myFootnoteGroup.value ;footnote1.value = footnote1_value;mySpatium.value = mySpatium_value;s_options.enabled = s_options_enabled;tireAndSpatium.value = tireAndSpatium_value;if (tireAndSpatium.value != true ) {	tireAndSpatium_value = 0;     myTireSpatiumGroup.enabled = false;    mySliderGroup.enabled = false; }else {	tireAndSpatium_value = 1;     myTireSpatiumGroup.enabled = true;    mySliderGroup.enabled = true;}  mySpaceListBefore.selection = mySpaceListBefore_selection;mySpaceListAfter.selection = mySpaceListAfter_selection;slider.value = mySlider_value;mySpaceProc.text = mySlider_value;commatire.value = commatire_value;commatire.value == false ? myCommaAndTire.enabled = false : myCommaAndTire.enabled = true;grekCharStyles.value = grekCharStyles_value;grekCharStyles.value == false ? mySpecCharLine.enabled = false : mySpecCharLine.enabled = true;myCommaAndTire.selection = myCommaAndTire_selection;shortword.value = shortword_value;shortword.value == false ? myShortWordSpace.enabled = false : myShortWordSpace.enabled = true;myShortWordSpace.selection = myShortWordSpace_selection;initials.value = initials_value;myASPushkinFirstSpace.selection = myASPushkinFirstSpace_selection;myASPushkinSecondSpace.selection = myASPushkinSecondSpace_selection;myPushkinASFirstSpace.selection = myPushkinASFirstSpace_selection;myPushkinASSecondSpace.selection = myPushkinASSecondSpace_selection;/*p_options.enabled = p_options_enabled;sevendigits.value = sevendigits_value;sixdigits.value = sixdigits_value;mySet34.value = mySet34_value;mySet322.value = mySet322_value;SepIsSpace.value = SepIsSpace_value;SepIsDefis.value = SepIsDefis_value;SepIsMinus.value = SepIsMinus_value;*/if (initials.value != true ) {     initials_value = 0;     myASPushkinFirstSpace.enabled = false;     myASPushkinSecondSpace.enabled = false;    myPushkinASFirstSpace.enabled = false;    myPushkinASSecondSpace.enabled = false;	    } else {    initials_value = 1;     myASPushkinFirstSpace.enabled = true;     myASPushkinSecondSpace.enabled = true;    myPushkinASFirstSpace.enabled = true;    myPushkinASSecondSpace.enabled = true;        }setquotes.value = setquotes_value;if  (myClean.value == true)  {        c_options.enabled = true;}else {         c_options.enabled = false; }if  (myTypographica.value == true)  {        t_options.enabled = true;}else {        t_options.enabled = false;}if  (mySpatium.value == true)  {        s_options.enabled = true;}else {        s_options.enabled = false;}mySpecialChar = mySpecialChar_start;mySpecCharLine.text = mySpecialChar_start;} // myResetSettings////////////////////function myParamsForProcessing(myPanelState,myCheckBoxState) { // myParamsForProcessingvar myRezult;if (myPanelState == true) {    myCheckBoxState == true ? myRezult = 1 : myRezult = 0;    myNumberOfActions++;     } else myRezult =2;return myRezult;} // myParamsForProcessing//////////////function mySaveInfoFile (myPath) { // mySaveInfoFilevar mySetInfoFile = new File (decodeURI(myPath));tt = mySetInfoFile.open("w");// для логических операций допустимо использовать 1 как истину и 0 как ложьmyClean.value == true ? mySetInfoFile.writeln(1) : mySetInfoFile.writeln(0);myCleanValueFromMenu = myClean.value;c_options.enabled == true ? mySetInfoFile.writeln(1) : mySetInfoFile.writeln(0);repChar.value == true ? mySetInfoFile.writeln(1) : mySetInfoFile.writeln(0);repCharFromMenu = myParamsForProcessing(myClean.value, repChar.value);tabs2spaces.value == true ? mySetInfoFile.writeln(1) : mySetInfoFile.writeln(0);tabs2spacesFromMenu = myParamsForProcessing(myClean.value, tabs2spaces.value);hyphens.value == true ? mySetInfoFile.writeln(1) : mySetInfoFile.writeln(0);hyphensFromMenu = myParamsForProcessing(myClean.value, hyphens.value); bull2text.value == true ? mySetInfoFile.writeln(1) : mySetInfoFile.writeln(0);bull2textFromMenu = myParamsForProcessing(myTypographica.value, bull2text.value);charStyles.value == true ? mySetInfoFile.writeln(1) : mySetInfoFile.writeln(0);charStylesFromMenu = myParamsForProcessing(myTypographica.value, charStyles.value); digAndChar.value == true ? mySetInfoFile.writeln(1) : mySetInfoFile.writeln(0);digAndCharFromMenu = myParamsForProcessing(myClean.value, digAndChar.value);rusLang.value == true ? mySetInfoFile.writeln(1) : mySetInfoFile.writeln(0);rusLangFromMenu = myParamsForProcessing(myTypographica.value, rusLang.value);myTypographica.value == true ? mySetInfoFile.writeln(1) : mySetInfoFile.writeln(0);myTypographicaValueFromMenu = myTypographica.value;t_options.enabled == true ? mySetInfoFile.writeln(1) : mySetInfoFile.writeln(0);hyplinks.value == true ? mySetInfoFile.writeln(1) : mySetInfoFile.writeln(0);hyplinksFromMenu = myParamsForProcessing(myClean.value, hyplinks.value);fixOneLetter.value == true ? mySetInfoFile.writeln(1) : mySetInfoFile.writeln(0);fixOneLetterFromMenu = myParamsForProcessing(myTypographica.value, fixOneLetter.value);fixTwoLetter.value == true ? mySetInfoFile.writeln(1) : mySetInfoFile.writeln(0);fixTwoLetterFromMenu = myParamsForProcessing(myTypographica.value, fixTwoLetter.value);fixDigitAndWord.value == true ? mySetInfoFile.writeln(1) : mySetInfoFile.writeln(0);fixDigitAndWordFromMenu = myParamsForProcessing(myTypographica.value, fixDigitAndWord.value);commonTire.value == true ? mySetInfoFile.writeln(1) : mySetInfoFile.writeln(0);commonTireFromMenu = myParamsForProcessing(myClean.value, commonTire.value);minus.value== true ? mySetInfoFile.writeln(1) : mySetInfoFile.writeln(0);minusFromMenu = myParamsForProcessing(myClean.value, minus.value);mlnWithoutPoint.value== true ? mySetInfoFile.writeln(1) : mySetInfoFile.writeln(0);mlnWithoutPointFromMenu = myParamsForProcessing(myClean.value,mlnWithoutPoint.value);myProcAndPromille.value == true ? mySetInfoFile.writeln(1) : mySetInfoFile.writeln(0);slitno.value== true ? mySetInfoFile.writeln(1) : mySetInfoFile.writeln(0);slitnoFromMenu = myParamsForProcessing(myProcAndPromille.value,slitno.value);myFootnoteGroup.value== true ? mySetInfoFile.writeln(1) : mySetInfoFile.writeln(0);footnote1.value== true ? mySetInfoFile.writeln(1) : mySetInfoFile.writeln(0);footnote1FromMenu = myParamsForProcessing(myFootnoteGroup.value,footnote1.value);//if (myStory.footnotes.length == 0) footnote1FromMenu = 2;ParaIndexFromMenu = myList.selection.index;oneStyleFromMenu = oneStyle.value;mySetInfoFile.writeln(myParaStyleNames[ParaIndexFromMenu]);mySpatium.value== true ? mySetInfoFile.writeln(1) : mySetInfoFile.writeln(0);s_options.enabled== true ? mySetInfoFile.writeln(1) : mySetInfoFile.writeln(0);mySpatiumValueFromMenu = mySpatium.value;tireAndSpatium.value== true ? mySetInfoFile.writeln(1) : mySetInfoFile.writeln(0);tireAndSpatiumFromMenu = myParamsForProcessing(mySpatium.value,tireAndSpatium.value);mySetInfoFile.writeln(mySpaceListBefore.selection.index);mySpaceListBeforeFromMenu = mySpaceListBefore.selection.index;mySetInfoFile.writeln(mySpaceListAfter.selection.index);mySpaceListAfterFromMenu = mySpaceListAfter.selection.index;mySetInfoFile.writeln(slider.value);mySliderValueFromMenu = slider.value;commatire.value== true ? mySetInfoFile.writeln(1) : mySetInfoFile.writeln(0);commatireFromMenu = myParamsForProcessing(mySpatium.value,commatire.value);mySetInfoFile.writeln(myCommaAndTire.selection.index);myCommaAndTireFromMenu = myCommaAndTire.selection.index;grekCharStyles.value == true ? mySetInfoFile.writeln(1) : mySetInfoFile.writeln(0);grekCharStylesFromMenu = myParamsForProcessing(myTypographica.value, grekCharStyles.value); shortword.value== true ? mySetInfoFile.writeln(1) : mySetInfoFile.writeln(0);shortwordFromMenu = myParamsForProcessing(mySpatium.value,shortword.value);mySetInfoFile.writeln(myShortWordSpace.selection.index);myShortWordSpaceFromMenu = myShortWordSpace.selection.index;initials.value== true ? mySetInfoFile.writeln(1) : mySetInfoFile.writeln(0);initialsFromMenu = myParamsForProcessing(mySpatium.value,initials.value);mySetInfoFile.writeln(myASPushkinFirstSpace.selection.index);myASPushkinFirstSpaceFromMenu = myASPushkinFirstSpace.selection.index;mySetInfoFile.writeln(myASPushkinSecondSpace.selection.index);myASPushkinSecondSpaceFromMenu = myASPushkinSecondSpace.selection.index;mySetInfoFile.writeln(myPushkinASFirstSpace.selection.index);myPushkinASFirstSpaceFromMenu = myPushkinASFirstSpace.selection.index;mySetInfoFile.writeln(myPushkinASSecondSpace.selection.index);myPushkinASSecondSpaceFromMenu = myPushkinASSecondSpace.selection.index;setquotes_valueFromMenu = myParamsForProcessing(myClean.value, setquotes.value);setquotes.value== true ? mySetInfoFile.writeln(1) : mySetInfoFile.writeln(0);mySpecialChar = mySpecCharLine.text;var myUnicodeInfo = [];var myLineLength = mySpecialChar.length;for (i = 0; i < myLineLength; i++) { //  i < myLineLength    myUnicodeInfo[i] = mySpecialChar.charCodeAt(i);    } //  i < myLineLengthvar myUnicodeLine = myUnicodeInfo.join(',');mySetInfoFile.writeln(myUnicodeLine);myPhone.value== true ? mySetInfoFile.writeln(1) : mySetInfoFile.writeln(0);myPhoneValueFromMenu = myPhone.value;p_options.enabled== true ? mySetInfoFile.writeln(1) : mySetInfoFile.writeln(0);sevendigits.value== true ? mySetInfoFile.writeln(1) : mySetInfoFile.writeln(0);sevendigitsFromMenu = myParamsForProcessing(myPhone.value,sevendigits.value);sixdigits.value== true ? mySetInfoFile.writeln(1) : mySetInfoFile.writeln(0);sixdigitsFromMenu = myParamsForProcessing(myPhone.value,sixdigits.value);mySet34.value== true ? mySetInfoFile.writeln(1) : mySetInfoFile.writeln(0);mySet34FromMenu = myParamsForProcessing(myPhone.value,mySet34.value);mySet322.value== true ? mySetInfoFile.writeln(1) : mySetInfoFile.writeln(0);mySet322FromMenu = myParamsForProcessing(myPhone.value,mySet322.value);SepIsSpace.value== true ? mySetInfoFile.writeln(1) : mySetInfoFile.writeln(0);SepIsSpaceFromMenu = myParamsForProcessing(myPhone.value,SepIsSpace.value);SepIsDefis.value== true ? mySetInfoFile.writeln(1) : mySetInfoFile.writeln(0);SepIsDefisFromMenu = myParamsForProcessing(myPhone.value,SepIsDefis.value);SepIsMinus.value== true ? mySetInfoFile.writeln(1) : mySetInfoFile.writeln(0);SepIsMinusFromMenu = myParamsForProcessing(myPhone.value,SepIsMinus.value);SepIsDot.value== true ? mySetInfoFile.writeln(1) : mySetInfoFile.writeln(0);SepIsDotFromMenu = myParamsForProcessing(myPhone.value,SepIsDot.value);myOneLineIsOneAbzatz.value== true ? mySetInfoFile.writeln(1) : mySetInfoFile.writeln(0);myOneLineIsOneAbzatzFromMenu = myParamsForProcessing(myClean.value,myOneLineIsOneAbzatz.value);SearchedDefis.value== true ? mySetInfoFile.writeln(1) : mySetInfoFile.writeln(0);SearchedDefisFromMenu = myParamsForProcessing(myPhone.value,SearchedDefis.value);SearchedMinus.value== true ? mySetInfoFile.writeln(1) : mySetInfoFile.writeln(0);SearchedMinusFromMenu = myParamsForProcessing(myPhone.value,SearchedMinus.value);SearchedTire.value== true ? mySetInfoFile.writeln(1) : mySetInfoFile.writeln(0);SearchedTireFromMenu = myParamsForProcessing(myPhone.value,SearchedTire.value);mySetInfoFile.close();} // mySaveInfoFile///////////////////return w;} // myScriptWindow//////////////////*** выбор сделан ***//////////////////////////////if (myJobCancelled == true) exit();var myDate = new Date;var myHour = myDate.getHours();if (myHour < 10) myHour = "0" + myHour;var myMinutes = myDate.getMinutes();if (myMinutes < 10) myMinutes = "0" + myMinutes;var mySecondes = myDate.getSeconds();// добавим необходимые стилиaddStyles();/// вызываем функцию с возможностью отмены одной командойapp.doScript(	D0TextOK,                     // The script to execute. Can accept: File, String or JavaScript Function.	ScriptLanguage.JAVASCRIPT,    // The language of the script to execute.	[],                           // An array of arguments passed to the function 	UndoModes.FAST_ENTIRE_SCRIPT, // How to undo this script.	'D0TextOK'                    // The name of the undo step for entire script undo mode. );// отчет о продолжительности обработкиvar myDate = new Date;var myHourFinis = myDate.getHours();var myMinutesFinis = myDate.getMinutes();var mySecondesFinis = myDate.getSeconds();var myMinutesOverflow = 0;var mySecondesOverflow = 0;myHourFinis = myHourFinis - myHour;myMinutesFinis = myMinutesFinis - myMinutes;mySecondesFinis = mySecondesFinis - mySecondes;if (mySecondesFinis <0) { //SW	myMinutesFinis--;		if (mySecondesFinis != 0) { mySecondesFinis = 60 + mySecondesFinis; }} //SWif (myMinutesFinis < 0)  { //DR	myHourFinis--;	if (myMinutesFinis != 0) { myMinutesFinis = 60 + myMinutesFinis; }	} //DRif (myHourFinis <10) myHourFinis = "0" + myHourFinis;if (myMinutesFinis <10) myMinutesFinis = "0" + myMinutesFinis;if (mySecondesFinis <10) mySecondesFinis = "0" + mySecondesFinis;// окно отчетаvar myWindow = new Window ("dialog", myProgramTitulWholeText, undefined,{closeButton: false}); var TimeProcessing = myWindow.add ("statictext");TimeProcessing.text = "Время обработки [ч:м:с] " + myHourFinis +":" + myMinutesFinis + ":" + mySecondesFinis;var mySampleInfo = myWindow.add ("statictext");var myRealUsedSet;if ( myResetOrRename == 1 ) myRealUsedSet = "Установки сброшены, использовался файл параметров " + myDefSetName;else if ( myResetOrRename == 2 ) myRealUsedSet = "Обработка выполнена созданным сейчас шаблоном " + mySpecialName;else myRealUsedSet = "файл параметров: " + myParaFileName;mySampleInfo.text = myRealUsedSet;var buttons = myWindow.add ("group");buttons.orientation = "row";var Info = buttons.add ("statictext");Info.text = "DoTextOK (" + myCurrentVersionData_xx_xx_xx + ") | © Михаил Иванюшин | adobeindesign.ru";myOKButon = buttons.add ("button", undefined, "OK", {name: "ok"});Info.graphics.font = dialogFont + ":11";Info.graphics.foregroundColor = Info.graphics.newPen (Info.graphics.PenType.SOLID_COLOR, [0, 0,1, 1], 1);myWindow.show();///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////function addStyles() {	// добавим специальный цвет	if (charStylesFromMenu == 1 || 		grekCharStylesFromMenu == 1 ||		footnote1FromMenu != 2) {				addDocumentCollectionElement('colors',{			name:       "myInfoColor", 			model:      ColorModel.process, 			space:      ColorSpace.CMYK, 			colorValue: myInfoColorSample		});	}	// добавим необходимые символьные стили	if (charStylesFromMenu == 1) { 		addDocumentCollectionElement("characterStyles", {			name:      "mySupChars",			position:  Position.SUPERSCRIPT,			fontStyle: "Regular",			fillColor: "myInfoColor"		});		addDocumentCollectionElement("characterStyles", {			name:      "mySubChars",			position:  Position.SUBSCRIPT,			fontStyle: "Regular",			fillColor: "myInfoColor"		});		addDocumentCollectionElement("characterStyles", {			name:      "myBoldChars",			fillColor: "myInfoColor"		});		addDocumentCollectionElement("characterStyles", {			name:      "myItalicChars",			fillColor: "myInfoColor"		});		addDocumentCollectionElement("characterStyles", {			name:      "myBoldItalicChars",			fillColor: "myInfoColor"		});	}	if (grekCharStylesFromMenu == 1) { // специальные символы		addDocumentCollectionElement("characterStyles", {			name:      "mySpecialChars",			fillColor: "myInfoColor"		});	}	if (footnote1FromMenu != 2) { // сноски		addDocumentCollectionElement("characterStyles", {			name:      "myFootnotes",			position:  Position.SUPERSCRIPT,			fillColor: "myInfoColor"		});	}}///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////function D0TextOK() {	// замена всех найденных объектов	for (var i = processingObjects.length; i--; ) {		var mySelection = processingObjects[i];				// создадим временный текстовый фрейм		var myObject = app.activeDocument.textFrames.add();		myText = myObject.parentStory;		mySelection.duplicate(LocationOptions.AFTER, myText);		mySelection.remove();				// информация о времени нужна для вывода ее в шапке прогресс-бара		myTxtProcessing(myProgramTitul, myHour, myMinutes, mySetInfoFile); 			// копируем обратно		myText.duplicate(LocationOptions.AFTER, mySelection);		myObject.remove(); // удален вспомогательный фрейм	}}///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////function myTxtProcessing (myProgramTitul,myHour,myMinutes,mySetInfoFile) { // myTxtProcessingvar pBar = new ProgressBar(myProgramTitul);pBar.reset(" Время начала обработки [ч:м] " + myHour + ":" +myMinutes, myNumberOfActions);if (hyplinksFromMenu != 2) { // hyplinksFromMenu != 2myCurrActionNumber++;myNextStep (pBar,myCurrActionNumber);if (hyplinksFromMenu == 1)  { pBar.info(" Удаление гиперссылок"); myRemoveHyperLinks(); }} // hyplinksFromMenu != 2myText.insertionPoints[0].contents = "\r";myText.insertionPoints[-1].contents = "\r";if (myCleanValueFromMenu == 1) { // myCleanValueFromMenu == 1myCurrActionNumber++;myNextStep (pBar,myCurrActionNumber);myFindChangeUsingGREP ("[" + myLineOfSpaces + "]",mySingleSpace, pBar," Замена шпаций на пробелы" );if (myOneLineIsOneAbzatzFromMenu == 1) { // myOneLineIsOneAbzatzFromMenu == 1// В таких текстах, когда каждая строка является одним абзацем, критерием истинного начала абзаца служит два или три пробела после знака Enter.// Очевидно, что после первого запуска текст станет нормальным, и эти повторяющиеся пробелы мсчезнут.// Но если вновь запустить скрипт, то текст превратится в один сплошной абзац.// Чтобы избежать этого кошмара, надо перед выполнением обработки убедиться, что в тексте есть хоть одно появление Enter-пробел-пробел.app.findGrepPreferences = NothingEnum.nothing;app.findGrepPreferences.findWhat = "(\\r  )";				myFoundSamples = myText.findGrep();if (myFoundSamples.length != 0) { // найдены 'Enter-пробел-пробел'pBar.info(" Сборка однострочных абзацев в нормальный текст");app.findGrepPreferences = NothingEnum.nothing;app.findGrepPreferences.findWhat = "(-\\r)";				myFoundSamples = myText.findGrep();if (myFoundSamples.length != 0) { // myFoundSamples.length != 0	var characterStyle = myDocument.characterStyles.itemByName("characterStyles");	// цикл по числу элементов коллекции. Движение снизу вверх	for (j=myFoundSamples.length-1; j >= 0; j--) { // j >= 0; j--			myLine = myFoundSamples[j] ;		myLine.characters[0].appliedCharacterStyle = characterStyle;		myLine.characters[1].remove();	} // j >= 0; j--} // myFoundSamples.length != 0else characterStyle.remove();//////>PlaceHolderForEnter = "Abzatz#";///>app.findGrepPreferences = NothingEnum.nothing;app.findGrepPreferences.findWhat = "(\\r\\r)";				myFoundSamples = myText.findGrep();if (myFoundSamples.length != 0) { // myFoundSamples.length != 0// цикл по числу элементов коллекции. Движение снизу вверх    for (j=myFoundSamples.length-1; j >= 0; j--) { // j >= 0; j--			myLine = myFoundSamples[j] ;		myLine.contents = PlaceHolderForEnter;	} // j >= 0; j--} // myFoundSamples.length != 0///app.findGrepPreferences = NothingEnum.nothing;app.findGrepPreferences.findWhat = "(\\r  )";				myFoundSamples = myText.findGrep();if (myFoundSamples.length != 0) { // myFoundSamples.length != 0// цикл по числу элементов коллекции. Движение снизу вверх    for (j=myFoundSamples.length-1; j >= 0; j--) { // j >= 0; j--			myLine = myFoundSamples[j] ;		myLine.contents = PlaceHolderForEnter;	} // j >= 0; j--} // myFoundSamples.length != 0///app.findGrepPreferences = NothingEnum.nothing;app.findGrepPreferences.findWhat = "(\\r)";				myFoundSamples = myText.findGrep();if (myFoundSamples.length != 0) { // myFoundSamples.length != 0// цикл по числу элементов коллекции. Движение снизу вверх    for (j=myFoundSamples.length-1; j >= 0; j--) { // j >= 0; j--			myLine = myFoundSamples[j] ;		myLine.characters[0].contents = " ";         } // j >= 0; j--} // myFoundSamples.length != 0///app.findGrepPreferences = NothingEnum.nothing;app.findGrepPreferences.findWhat = PlaceHolderForEnter;				myFoundSamples = myText.findGrep();if (myFoundSamples.length != 0) { // myFoundSamples.length != 0// цикл по числу элементов коллекции. Движение снизу вверх    for (j=myFoundSamples.length-1; j >= 0; j--) { // j >= 0; j--			myLine = myFoundSamples[j] ;		myLine.contents = "\r";         } // j >= 0; j--} // myFoundSamples.length != 0} // найдены 'Enter-пробел-пробел'} // myOneLineIsOneAbzatzFromMenu == 1myFindChangeUsingGREP("\\]","] ",pBar," Порядок в оформлении скобок ]");myFindChangeUsingGREP("\\["," [",pBar," Порядок в оформлении скобок [");myFindChangeUsingGREP("\\)",") ",pBar," Порядок в оформлении скобок )");myFindChangeUsingGREP("\\("," (",pBar," Порядок в оформлении скобок (");myFindChangeUsingGREP("\\}","} ",pBar," Порядок в оформлении скобок }");myFindChangeUsingGREP("\\{"," {",pBar," Порядок в оформлении скобок {");myFindChangeUsingGREP (myMultipleSpaces,mySingleSpace, pBar," Избавление от повторяющихся пробелов ");myFindChangeUsingGREP("(д\\.)(\\d)","$1" +" " + "$2",pBar," Отбивка между 'д.' и номером");  myFindChangeUsingGREP("(д\\.)( )(\\d)","$1" + myThinSpace + "$3",pBar," Отбивка между 'д.' и номером");  //myFindChangeUsingGREP ("([[:blank:]]*)",mySingleSpace); // эта строка и табуляцию учитывает. А тут это не допустимоmyFindChangeUsingGREP (myNonbreakingHyphen,"-", pBar," Замена неразрывных дефисов на обычные");if (repCharFromMenu != 2) { // repCharFromMenu != 2	myCurrActionNumber++;	myNextStep (pBar,myCurrActionNumber);		if (repCharFromMenu == 1) {		myFindChangeUsingGREP ("\\n{2,}", "\\n", pBar, " Избавление от повторяющихся переводов строки");		myFindChangeUsingGREP ("\\r{2,}", mySingleReturn, pBar, " Избавление от повторяющихся переводов строки");	}	// удаление переводов строки и одиночных пробелов в начале и конце ячеек таблиц	var myCellPara;	var myCellParaCont = "";		for (var i = 0; i < myText.tables.length; i++) { // i				for (var j = 0; j < myText.tables[i].cells.length; j++) { // j			myCellPara = myText.tables[i].cells[j];			myCellParaCont = myCellPara.contents;						if (myCellParaCont.length != 0) { // myCellParaCont.length != 0				try { if (myCellPara.characters.lastItem().contents == mySingleReturn) myCellPara.paragraphs.lastItem().characters.lastItem().remove(); } catch(e) { }				try { if (myCellPara.characters.lastItem().contents == " ") myCellPara.paragraphs.lastItem().characters.lastItem().remove(); } catch(e) { }				try { if (myCellPara.characters.firstItem().contents == mySingleReturn) myCellPara.paragraphs.firstItem().characters.firstItem().remove(); } catch(e) { }				try { if (myCellPara.characters.firstItem().contents == " ") myCellPara.paragraphs.firstItem().characters.firstItem().remove(); } catch(e) { }			} // myCellParaCont.length != 0		} // j	} // i	// удаление переводов строки в конце сноски	var myFootnote;	var myFootnoteCont;		for (var i = 0; i < myText.footnotes.length; i++) { // i		myFootnote = myText.footnotes[i];		myFootnoteCont = myFootnote.contents;				if (myFootnoteCont.length != 0) { // != 0			if (myFootnote.characters.lastItem().contents == mySingleReturn)  { try { myFootnote.paragraphs.lastItem().characters.lastItem().remove(); } catch(e) { }  }			if (myFootnote.characters.lastItem().contents == " ")  { try { myFootnote.paragraphs.lastItem().characters.lastItem().remove(); } catch(e) { }  }		} // != 0  	} // i} // repCharFromMenu != 2if (tabs2spacesFromMenu != 2) { // tabs2spacesFromMenu != 2myCurrActionNumber++;myNextStep (pBar,myCurrActionNumber);if (tabs2spacesFromMenu == 1) {     myFindChangeUsingGREP (myMultipleTabs,mySingleSpace,pBar," Замена повторяющихся табуляций на пробелы.");     myFindChangeUsingGREP ("\t",mySingleSpace,pBar," Замена повторяющихся табуляций на пробелы..");     myFindChangeUsingGREP ("([\\r\\n])( )","$1",pBar," Замена повторяющихся табуляций на пробелы...");     }} // tabs2spacesFromMenu != 2    //myFindChangeUsingGREP("(Дж\\.)( *)(Дж\\.)", "$1" + myThinSpace + "$3",pBar," Порядок в написании Дж. (сокращение имени)");//myFindChangeUsingGREP("(св\\.)( *)(св\\.)", "$1" + myThinSpace + "$3",pBar," Порядок в написании св.");//  ~e -- это многоточиеmyFindChangeUsingGREP("\\.\\.\\.","~e",pBar," Замена трех точек на многоточие");//myFindChangeUsingGREP("\\.\\.\\.\\.","~e ",pBar," Четыре точки на многоточие и пробел");myFindChangeUsingGREP("~e\\.","~e ",pBar," Многоточие и точка на многоточие и пробел");myFindChangeUsingGREP("\\.~e","\. ~e",pBar," Точка и многоточие на точку пробел и многоточие");//myFindChangeUsingGREP(",\\.\\.\\.",",\.\. ",pBar," Запятая и три точки");//myFindChangeUsingGREP(",~e",",\.\. ",pBar," Запятая и многоточие");//myFindChangeUsingGREP("!\\.\\.\\.","!\.\. ",pBar," Восклицательный знак и три точки");//myFindChangeUsingGREP("!~e","!\.\. ",pBar," Восклицательный знак и многоточие"); //myFindChangeUsingGREP("\\?\\.\\.\\.","?\.\. ",pBar," Вопросительный знак и три точки"); //myFindChangeUsingGREP("\\?~e","?\.\. ",pBar," Вопросительный знак и многоточие");  myFindChangeUsingGREP(myChar0x2212,"–",pBar," Замена минуса (знак с кодом 0х2212) на короткое тире"); myFindChangeUsingGREP("(\\r|\\n)( )","$1",pBar," Удаление пробела после перевода строки");if (hyphensFromMenu != 2) { // hyphensFromMenu != 2myCurrActionNumber++;myNextStep (pBar,myCurrActionNumber);if (hyphensFromMenu == 1) {    myFindChangeUsingGREP(myDiscretionaryHyphen,"",pBar," Удаление переносов");  // удаляем переносы, которые могли остаться из кварковских файлов    myFindChangeUsingGREP(myWinWordHyphen,"",pBar," Удаление переносов"); // удаляем переносы, которые могли остаться из вордовских файлов    }} // hyphensFromMenu != 2    myFindChangeUsingGREP("(°)( *)([CС])","$1" + "C",pBar," Приведение в порядок написания температуры по Цельсию"); // русская и латинская буквы СmyFindChangeUsingGREP("(\\d)(°C)","$1" + " " + "$2",pBar," Приведение в порядок написания температуры по Цельсию");  myFindChangeUsingGREP("--","—",pBar," Замена двух подряд идущих дефисов на тире");myFindChangeUsingGREP("([\\(\\[\\{])( )","$1",pBar," Удаление пробела после открывающей скобки");  myFindChangeUsingGREP("( )([\\)\\]\\}])","$2",pBar," Удаление пробела перед закрывающей скобкой"); myFindChangeUsingGREP("([\\r\\n \\(])([-—])(\\d)","$1" + myMinusChar + "$3",pBar," Ищем пробел и тире (или дефис) перед цифрой и ставим перед цифрой минус"); myFindChangeUsingGREP(myNonbreakingHyphen + myNonbreakingHyphen,"—",pBar," Замена двух подряд идущих неразрывных дефисов на тире"); myFindChangeUsingGREP("-" + myNonbreakingHyphen,"—",pBar," Замена обычного дефиса и неразрывного на тире"); myFindChangeUsingGREP(myNonbreakingHyphen + "-","—",pBar," Замена неразрывного дефиса и обычного на тире");  myFindChangeUsingGREP("(,|\\.)( *)(-|–|—)","$1" + "—",pBar," Удаление пробела после запятой(или точки) перед тире (попутно минус или дефис превращаем в тире)"); myFindChangeUsingGREP("([\\l\\u])(—)([\\l\\u])", "$1" + " — " + "$3",pBar,"  Разделяющий слова минус превращаем в тире)"); myFindChangeUsingGREP(" - "," — ",pBar," Замена дефиса, отбитого пробелами, на тире со стандартными отбивками");myFindChangeUsingGREP(" – "," — ",pBar," Замена минуса, отбитого пробелами, на тире со стандартными отбивками");myFindChangeUsingGREP("( *)([\\.,;:!\\?\\)\\]\\}%‰])","$2",pBar," Удаление пробелов перед знаками пунктуации, скобками, знаками % и ‰");myFindChangeUsingGREP("(\\r)( *)([-–—])( *)(\\u|„|“|«|»|”|‚|‘|’|\'|\"|~e)","$1" + "—" + myEnSpace + "$5",pBar," Дефис или минус в начале абзаца заменяется на тире, после полукруглая шпация");myFindChangeUsingGREP("([!\\?])(\\u)","$1"+" "+"$2",pBar," Восстановление потерянного пробела после ! или ?");myFindChangeUsingGREP("([~e,:;])([\\l\\u])","$1"+" "+"$2",pBar," Восстановление потерянного пробела после знаков пунктуации");myFindChangeUsingGREP("([~e,.])([-–—])( *)([\\l\\u])","$1"+ " " + "$2" +" " + "$4",pBar," Восстановление потерянного пробела перед тире");myFindChangeUsingGREP("(\\d)( *)(г\\.|гг\\.|г\\.г\\.)","$1" + myNonbreakingSpaceFixedWidth + "$3",pBar," Неразрывный пробел перед 'г.' или 'гг.'" );myFindChangeUsingGREP("(I|V|X|Х|L|M|М|C|С)( )(в.|вв.|век)","$1" + myNonbreakingSpace + "$3",pBar," Неразрывный пробел между римской цифрой и 'в./вв./век'" ); // XХ MМ CС  -- русские и латинские буквыmyFindChangeUsingGREP("(I|V|X|Х|L|M|М|C|С)(-|–|—| — )(I|V|X|Х|L|M|М|C|С)","$1" + myMinusChar + "$3",pBar," Минус между римскими цифрами"); // XХ MМ CС  -- русские и латинские буквыmyFindChangeUsingGREP("([№§])","$1" + myNonbreakingSpaceFixedWidth,pBar," Неразрывный фиксированный пробел после № или §");myFindChangeUsingGREP(myNonbreakingSpaceFixedWidth +" ",myNonbreakingSpaceFixedWidth,pBar," Неразрывный фиксированный пробел после № или §"); // на случай, если до выполнения операции предыдущей строки перед номером и параграфом был пробелif (commonTireFromMenu != 2) { // commonTireFromMenu != 2myCurrActionNumber++;myNextStep (pBar,myCurrActionNumber);if (commonTireFromMenu == 0) {  // в качестве тире выбран минус    myFindChangeUsingGREP(" — ", " – ",pBar," Замена тире на минус");    myFindChangeUsingGREP("— ", "– ",pBar," Замена тире на минус");    myFindChangeUsingGREP(" —", " –",pBar," Замена тире на минус");   }} // commonTireFromMenu != 2var myRealDigitSeparator;minusFromMenu == 0  ?  myRealDigitSeparator = "—"   : myRealDigitSeparator = "–" ;// Минус между цифрамиmyFindChangeUsingGREP("(\\d)(-|–|—| — | —|— | – | –|– | -|- )(\\d)","$1" + myRealDigitSeparator + "$3",pBar," Минус между цифрами");// следующие две строки -- учет ситуации, что при обработке последовательности цифр, разделенных дефисами, вторая цифра попала в grep-анализ, и дефис после неё обнаружен не будет.// Поэтому если этих строк не будет, то 1-2-3-4-5 будет выглядеть так: 1—2-3—4-5.// А с ними: 1—2—3—4—5if (myRealDigitSeparator == "—") myFindChangeUsingGREP("(\\d)(-|–| – | –|– | -|- )(\\d)","$1" + myRealDigitSeparator + "$3",pBar," Минус между цифрами");if (myRealDigitSeparator == "–") myFindChangeUsingGREP("(\\d)(-|—| — | —|— | -|- )(\\d)","$1" + myRealDigitSeparator + "$3",pBar," Минус между цифрами");mySetNoBreak("^9" +  myRealDigitSeparator + "^9");mySetNoBreak("^9" +  "-" + "^$");myFindChangeUsingGREP("( в| во|\\rв|\\nв|\\rво|\\nво)(-|–|—| — | —|— | – | –|– | -|- )(\\l)", "$1" + myNonbreakingHyphen + "$3",pBar," Неразрывный дефис после частицы 'в' или 'во'");if (digAndCharFromMenu != 2) { // digAndCharFromMenu != 2myCurrActionNumber++;myNextStep (pBar,myCurrActionNumber);if (digAndCharFromMenu == 1)  { pBar.info (" Порядок в наращении чисел"); myAugment() }} // digAndCharFromMenu != 2if (setquotes_valueFromMenu != 2) { // setquotes_valueFromMenu != 2myCurrActionNumber++;myNextStep (pBar,myCurrActionNumber);if (setquotes_valueFromMenu == 1) { pBar.info(" Обработка кавычек"); myAllQuoteProcessing() }} // setquotes_valueFromMenu != 2// mlnWithoutPointFromMenu = 2 - этот случай не анализируется, т.к. он возможен только, когда myCleanValueFromMenu = 0, но тогда не выполняются все команды  { // myCleanValueFromMenu == 1 .......  } // myCleanValueFromMenu == 1if (mlnWithoutPointFromMenu == 0) myFindChangeUsingGREP("(млн|млрд|трлн)( |,)","$1" + "\." + "$2",pBar," Добавление точки после млн, млрд, трлн");else if (mlnWithoutPointFromMenu == 1) myFindChangeUsingGREP("(млн|млрд|трлн)(.)( |, )(\\l|\\d)","$1" + "$3" + "$4",pBar," Удаление точки после млн., млрд., трлн."); // (\\l|\\d) -- критерий, что точка после сокращения не является концом предложения//myFindChangeUsingGREP("( )(\\r|\\n)", "$2",pBar," Удаление пробела перед знаком перевода строки"); < -- эта строка на стыке абзацев разных стилей работает некорректно: следующему за знаком перевода строки абзацу присваивается стиль абзаца, в котором удаляется пробел перед знаком перевода строки// Вот это решение свободно это этой проблемыapp.findGrepPreferences = NothingEnum.nothing;app.findGrepPreferences.findWhat = " \r";				myFoundSamples = myText.findGrep();if (myFoundSamples.length != 0) { // 1// цикл по числу элементов коллекции. Движение снизу вверх    for (j=myFoundSamples.length-1; j >= 0; j--) {			myLine = myFoundSamples[j] ;		myLine.characters[0].remove();	// удаляем пробел	}} // 1myFindChangeUsingGREP("(\\r|\\n)(-)( *)(\\u)", "$1" + "— " + "$4",pBar," Замена дефиса после перевода строки на тире");// Удаление пробелов перед знаком сноскиmyRemoveSpacesBeforeFootnoteSign();myFindChangeUsingGREP("( )(г\\.)( *)(\\u)","$1" + "$2" + myNonbreakingSpaceFixedWidth + "$4",pBar," Востанавливаем пробел между сокращением 'г.' и названием города");myFindChangeUsingGREP("(=)(-|–|—)(\\d)","$1" + " –" + "$3",pBar," Восстанавливаем пробел между знаком равенства и отрицательным числом");} // myCleanValueFromMenu == 1/////if (myTypographicaValueFromMenu == 1) { // myTypographicaValueFromMenu == 1if (fixOneLetterFromMenu != 2) { // fixOneLetterFromMenu != 2myCurrActionNumber++;myNextStep (pBar,myCurrActionNumber);if (fixOneLetterFromMenu == 1) {    myFindChangeUsingGREP("( )" + SpaceLetterNonbreackingSpace + "( )","$1" + "$2" + myNonbreakingSpace,pBar," Запрет отрывать однобуквенные слова");    myFindChangeUsingGREP("( )" + NonbreackingSpaceLetterSpace + "( )",myNonbreakingSpace + "$2" + "$3" ,pBar," Запрет отрывать однобуквенные слова");// повтор проверки, чтобы учесть вставленные только что неразрывные пробелы  myFindChangeUsingGREP("( )" + SpaceLetterNonbreackingSpace + "(" + myNonbreakingSpace + ")" + SpaceLetterNonbreackingSpace + "( )","$1" + "$2" + "$3" + "$4" + myNonbreakingSpace,pBar," Запрет отрывать однобуквенные слова");   }} // fixOneLetterFromMenu != 2if (fixTwoLetterFromMenu != 2) { // fixTwoLetterFromMenu != 2myCurrActionNumber++;myNextStep (pBar,myCurrActionNumber);if (fixTwoLetterFromMenu == 1) {    myFindChangeUsingGREP("( " +"|" + myNonbreakingSpace +")" + SpaceTwoLetterNonbreackingSpace + "( )","$1" + "$2" + myNonbreakingSpace,pBar," Запрет отрывать двухбуквенные слова");    myFindChangeUsingGREP("( )" + NonbreackingSpaceTwoLetterSpace + "( )",myNonbreakingSpace + "$2" + "$3" ,pBar," Запрет отрывать двухбуквенные слова");    }} // fixTwoLetterFromMenu != 2if (bull2textFromMenu != 2) { // bull2textFromMenu != 2myCurrActionNumber++;myNextStep (pBar,myCurrActionNumber);if (bull2textFromMenu == 1) { pBar.info(" Преобразование буллитов и нумерации в текст"); myText.convertBulletsAndNumberingToText(); }} // bull2textFromMenu != 2if (fixDigitAndWordFromMenu != 2) { // fixDigitAndWordFromMenu != 2myCurrActionNumber++;myNextStep (pBar,myCurrActionNumber);if (fixDigitAndWordFromMenu == 1) myFindChangeUsingGREP (myUnits, "$1" + myNonbreakingSpace + "$3",pBar," Неразрывный пробел между числом и единицей измерения");} // fixDigitAndWordFromMenu != 2if (charStylesFromMenu != 2) { // charStylesFromMenu != 2myCurrActionNumber++;myNextStep (pBar,myCurrActionNumber);if (charStylesFromMenu == 1) { 	pBar.info(" Создание символьных стилей для курсива, полужирного, индексов"); 	myBoldItalicAndIndexSelection(); }} // charStylesFromMenu != 2if (grekCharStylesFromMenu != 2) { // grekCharStylesFromMenu != 2	myCurrActionNumber++;	myNextStep (pBar,myCurrActionNumber);		if (grekCharStylesFromMenu == 1) myGrekChar();} // grekCharStylesFromMenu != 2if (footnote1FromMenu != 2) { // footnote1FromMenu != 2	myCurrActionNumber++;	myNextStep (pBar,myCurrActionNumber);	if (footnote1FromMenu == 1) {  //  footnote1FromMenu == 1  		pBar.info(" Приведение в порядок очерёдности знаков пунктуации и сносок"); 		FootnoteSignMustBe("BeforePoint");   // ищем случаи, когда сперва точка/запятая, потом знак сноски, и меняем их местами	}  //  footnote1FromMenu == 1	else { 		pBar.info(" Приведение в порядок очерёдности знаков пунктуации и сносок"); 		FootnoteSignMustBe("AfterPoint"); 	}    // ищем случаи, когда сперва знак сноски, потом  точка/запятая, и меняем их местами	myAddSpacesBeforeFootnoteSign(); // перед знаком сноски ставим волосяную шпацию} // footnote1FromMenu != 2pBar.info(" Запрет разрыва единиц измерения по дробной черте"); MakeSlashNoBreak();   // ищем случаи ц/га, руб./долл. и пр. и присваиваем наклонной черте атрибут NoBreakif (oneStyleFromMenu == true) myText.paragraphs.itemByRange(0,-1).appliedParagraphStyle = myDocument.paragraphStyles[ParaIndexFromMenu];if (rusLangFromMenu == 1)  { // rusLangFromMenu == 1	var myTextObject = myText.texts.item(0);	try {myTextObject.appliedLanguage = "Russian"; }	catch (e) {		try {myTextObject.appliedLanguage = "Русский"; }		catch (e) { alert("Не удалось присвоить тексту атрибут 'Русский язык'.");}         }	} // rusLangFromMenu == 1	}  // myTypographicaValueFromMenu == 1/////if (mySpatiumValueFromMenu == 1) { // mySpatiumValueFromMenu == 1if (tireAndSpatiumFromMenu != 2) { // tireAndSpatiumFromMenu != 2myCurrActionNumber++;myNextStep (pBar,myCurrActionNumber);var myRealTire;commonTireFromMenu == 0 ? myRealTire = "–" : myRealTire = "—";if (tireAndSpatiumFromMenu == 1) myFindChangeScaleUsingGREP("([" + myLineOfSpaces + "])(" + myRealTire + ")([" + myLineOfSpaces + "])",myAllSpacesValues[mySpaceListBeforeFromMenu] + myRealTire + myAllSpacesValues[mySpaceListAfterFromMenu],myRealTire,pBar," Обработка шпаций до и после тире");//if (tireAndSpatiumFromMenu == 1) myFindChangeScaleUsingGREP("([[:space:]])(" + myRealTire + ")( )",myAllSpacesValues[mySpaceListBeforeFromMenu] + myRealTire + myAllSpacesValues[mySpaceListAfterFromMenu],myRealTire,pBar," Обработка шпаций до и после тире");} // tireAndSpatiumFromMenu != 2if (commatireFromMenu != 2) { // commatireFromMenu != 2myCurrActionNumber++;7myNextStep (pBar,myCurrActionNumber);if (commatireFromMenu == 1) { // commatireFromMenu == 1    myFindChangeUsingGREP("(,|\\.|~e)([" + myLineOfSpaces + "]*)(—|–)","$1" + myAllSpacesValues[myCommaAndTireFromMenu] + myRealTire,pBar," Шпация между запятой, точкой, многоточием и тире");      if (myAllSpacesValues[myCommaAndTireFromMenu] == myNoSpace && mySliderValueFromMenu <100) { // == myNoSpace// Если выполнилось масштабирование обрамляющих тире шпаций, то после удаления левой шпации, той, что идёт после тире/точки/многоточия, это масштабирование будет приложено к тире.// Чтобы избавиться от этого, сделана последовательность действий, заключенная между { // == myNoSpace  и  } // == myNoSpace//        app.findGrepPreferences = NothingEnum.nothing;        app.findGrepPreferences.findWhat = myRealTire;				        myFoundSamples = myText.findGrep();        if (myFoundSamples.length != 0) { // myFoundSamples.length != 0    // цикл по числу элементов коллекции. Движение снизу вверх            for (j=myFoundSamples.length-1; j >= 0; j--) { // j >= 0; j--	                myLine = myFoundSamples[j] ;                try { myLine.characters.item(0).horizontalScale = 100; } catch (e) {continue; }                 } // j >= 0; j--    } // myFoundSamples.length != 0} // == myNoSpace} // commatireFromMenu == 1} // commatireFromMenu != 2if (shortwordFromMenu != 2) { // shortwordFromMenu != 2myCurrActionNumber++;myNextStep (pBar,myCurrActionNumber);if (shortwordFromMenu == 1) myFindChangeUsingGREP("([\\n" + myLineOfSpaces + "\\(])(\\l\\.)([" + myLineOfSpaces + "]*)(\\l\\.)","$1" + "$2" + myAllSpacesValues[myShortWordSpaceFromMenu] + "$4",pBar," Шпация в сокращениях (т.к., т.п., т.д.)");} // shortwordFromMenu != 2if (initialsFromMenu != 2) { // initialsFromMenu != 2myCurrActionNumber++;myNextStep (pBar,myCurrActionNumber);if (initialsFromMenu == 1) { // initialsFromMenu == 1   //   +?\\.{0,1}    myFindChangeUsingGREP("([\\r\\n" + myLineOfSpaces + "\\(])(\\u\\.|Дж\\.)([" + myLineOfSpaces + "]*)(\\u\\.|Дж\\.)([" + myLineOfSpaces + "]*)(\\u\\l+\\>)","$1" + "$2" + myAllSpacesValues[myASPushkinFirstSpaceFromMenu] + "$4" + myAllSpacesValues[myASPushkinSecondSpaceFromMenu] + "$6",pBar," Шпации в инициалах"); // (А. С. Пушкин   Дж. Дж. Томсон    //myFindChangeUsingGREP("([\\r\\n" + myLineOfSpaces + "\\(])(\\u\\.|Дж\\.)([" + myLineOfSpaces + "]*)(\\u\\.|Дж\\.)([" + myLineOfSpaces + "]*)(\\u\\l{3,4})","$1" + "$2" + myAllSpacesValues[myASPushkinFirstSpaceFromMenu] + "$4" + myAllSpacesValues[myASPushkinSecondSpaceFromMenu] + "$6",pBar," Шпации в инициалах"); // (А. С. Пушкин   Дж. Дж. Томсон    myFindChangeUsingGREP("([\\r\\n" + myLineOfSpaces + "\\(])(\\u\\.|Дж\\.|св\\.|Св\\.)([" + myLineOfSpaces + "]*)(\\u\\l+\\>)","$1" + "$2"  + myAllSpacesValues[myASPushkinSecondSpaceFromMenu] + "$4",pBar," Шпации в инициалах"); // (А. Пушкин   Дж. Томсон  св. Августин    myFindChangeUsingGREP("([\\r\\n" + myLineOfSpaces + "\\(])(\\u\\l+\\>)([" + myLineOfSpaces + "]*)(\\u)(\\.)([" + myLineOfSpaces + "]*)(\\u)(\\.)","$1" + "$2" + myAllSpacesValues[myPushkinASFirstSpaceFromMenu] + "$4" + "$5" + myAllSpacesValues[myPushkinASSecondSpaceFromMenu] + "$7" + "$8",pBar," Шпации в инициалах");  // Пушкин А. С.      myFindChangeUsingGREP("([\\r\\n" + myLineOfSpaces + "\\(])(\\u\\l+\\>)([" + myLineOfSpaces + "]*)(\\u)(\\.)","$1" + "$2" + myAllSpacesValues[myPushkinASFirstSpaceFromMenu]  + "$4"+ "$5",pBar," Шпации в инициалах"); // Пушкин А.    } // initialsFromMenu == 1} // initialsFromMenu != 2//~ initialsFromMenuif (slitnoFromMenu != 2) { // slitnoFromMenu != 2myCurrActionNumber++;myNextStep (pBar,myCurrActionNumber);if (slitnoFromMenu == 0) myFindChangeUsingGREP("(\\d)(%|‰)","$1" + myThinSpace + "$2",pBar," Обработка знаков процента и промилле");  } // slitnoFromMenu != 2} // mySpatiumValueFromMenu == 1if (myPhoneValueFromMenu == 1) { // myPhoneValueFromMenu == 1var mySearchSep;if (SearchedDefisFromMenu == 1) mySearchSep = "(-)";else if (SearchedMinusFromMenu == 1) mySearchSep = "(–)";else if (SearchedTireFromMenu == 1) mySearchSep = "(—)";else { alert ("Разделитель групп цифр в обрабатываемых телефонных номерах не определен, поэтому в качестве разделителя будет дефис."); mySearchSep = "(-)"; } //var myNmrSep;if (SepIsSpaceFromMenu == 1) myNmrSep = myNonbreakingSpaceFixedWidth;else if (SepIsDefisFromMenu == 1) myNmrSep = myNonbreakingHyphen;else if (SepIsMinusFromMenu == 1) myNmrSep = "–";else if (SepIsDotFromMenu == 1) myNmrSep = ".";else { alert ("Разделитель групп цифр в обработанных телефонных номерах не определен, поэтому в качестве разделителя будет дефис."); myNmrSep = myNonbreakingHyphen; }if (sevendigitsFromMenu == 1) { // sevendigitsFromMenu == 1    if (mySet34FromMenu == 1) { // mySet34FromMenu == 1        myFindChangeUsingGREP("(\\d\\d\\d)" + mySearchSep + "(\\d\\d\\d\\d)","$1" + myNmrSep + "$3",pBar," Обработка телефонных номеров формата XXX-XXXX");        } // mySet34FromMenu == 1    if (mySet322FromMenu == 1) { // mySet322FromMenu == 1        myFindChangeUsingGREP("(\\d\\d\\d)"+ mySearchSep + "(\\d\\d)"+ mySearchSep + "(d\\d)","$1" + myNmrSep + "$3" + myNmrSep + "$5",pBar," Обработка телефонных номеров формата XXX-XX-XX");        } // mySet34FromMenu == 1         } // sevendigitsFromMenu == 1 if (sixdigitsFromMenu == 1) { // sixdigitsFromMenu == 1    myFindChangeUsingGREP("(\\d\\d)" + mySearchSep + "(\\d\\d)"+ mySearchSep + "(\\d\\d)","$1" + myNmrSep + "$3" + myNmrSep + "$5",pBar," Обработка телефонных номеров формата XX-XX-XX");     } // sixdigitsFromMenu == 1} // myPhoneValueFromMenu == 1// все вкладки обработаны// удаляем знаки перевода строки в начале и конце текста, оставшиеся после обработкиtry { myText.characters[-1].remove(); } catch (e) {  }try { myText.characters[0].remove(); } catch (e) {  }//~ if (myCleanValueFromMenu != 1 && myTypographicaValueFromMenu != 1 && mySpatiumValueFromMenu != 1 && myPhoneValueFromMenu == 1) { // активна только вкладка с телефонами//~     alert ("Когда активна только вкладка с обработкой телефонных номеров,\nможно много раз выполнять их обработку.\nЧтобы завершить работу, щелкните на крестике в правом верхнем углу окна.", myProgramTitul);//~     return;//~     }pBar.close();} // myTxtProcessing//////function myFindChangeUsingGREP (myFindPattern,mychangePattern, myFunc, myCurrAction) { // myFindChangeUsingGREPmyFunc.info (myCurrAction);myFunc.set(myCurrActionNumber);app.findGrepPreferences = NothingEnum.nothing;app.changeGrepPreferences = NothingEnum.nothing;app.findChangeGrepOptions.includeFootnotes = true;app.findGrepPreferences.findWhat = myFindPattern;app.changeGrepPreferences.changeTo = mychangePattern;myText.changeGrep();} // myFindChangeUsingGREP //////function myFindChangeScaleUsingGREP (myFindPattern, mychangePattern, myRealTire, myFunc, myCurrAction) { // myFindChangeScaleUsingGREPmyFunc.info (myCurrAction);//if (myCurrAction[0] != " ") myCurrActionNumber++; //myFunc.set(myCurrActionNumber);// перед масштабированием восстановим масштаб в 100%myText.characters.itemByRange(0,-1).horizontalScale = 100;///app.findGrepPreferences = NothingEnum.nothing;app.changeGrepPreferences = NothingEnum.nothing;app.findChangeGrepOptions.includeFootnotes = true;app.findGrepPreferences.findWhat = myFindPattern;app.changeGrepPreferences.changeTo = mychangePattern;myText.changeGrep();if (mySliderValueFromMenu <100) { // mySliderValueFromMenu <100// теперь ищем результаты замены app.findGrepPreferences.findWhat = myAllSpacesValues[mySpaceListBeforeFromMenu] + myRealTire + myAllSpacesValues[mySpaceListAfterFromMenu];var myScaledSpaces = myText.findGrep();var myLine;for (i = 0; i < myScaledSpaces.length; i++) { // myScaledSpaces.lengthmyLine = myScaledSpaces[i]; // это объект String// чтобы адресоваться к конкретным символам строки, их надо определить, например, так:try { myLine.characters.item(0).horizontalScale = mySliderValueFromMenu; } catch (e) {continue; } // если в качестве шпации выбрано "Нет отбивки", то масштабирование смысла не имеет. Программма свалится. Чтобы исключить такое развитие событий, взяты интсрументы try / catchtry { myLine.characters.item(2).horizontalScale = mySliderValueFromMenu; } catch (e) {continue; }} // myScaledSpaces.length} // mySliderValueFromMenu <100} // myFindChangeScaleUsingGREP //////////////////function mySetNoBreak(myCharForProc) { // mySetNoBreakapp.findTextPreferences = app.changeTextPreferences = NothingEnum.nothing;app.findChangeTextOptions.includeFootnotes = true;app.findTextPreferences.findWhat =myCharForProc; // маска поискаmyFound = myText.findText(); //собрана коллекция искомых элементов в статьеif (myFound.length !=0) { // !=0	for (j=myFound.length-1; j >= 0; j--){ // j >= 0		myLine = myFound[j] ;	var myInd = myLine.index;    myInd++; // если обрабатывается сочетание цифра-минус-цифра, то индекс должен указывать на минус	myLine.parent.characters[myInd].noBreak = true;	}  // j >= 0} // !=0} // mySetNoBreak/////////////////////////////////function myAugment () { //myAugment// Augment -- наращение. Ищем в тексте неправильные наращения, например, 5-ого, 14-ых, и исправляем их: 5-го, 14-хvar mySearchedTwoCharacters = '(\\d-ый[,.;:!?\\s]|\\d-ой[,.;:!?\\s]|\\d-ий[,.;:!?\\s]|\\d-ым[,.;:!?\\s]|\\d-им[,.;:!?\\s]|\\d-ом[,.;:!?\\s]|\\d-ем[,.;:!?\\s]|\\d-ых[,.;:!?\\s]|\\d-их[,.;:!?\\s]|\\d-ые[,.;:!?\\s]|\\d-ьи[,.;:!?\\s])';var mySearchedThreeCharacters = '(\\d-ого[,.;:!?\\s]|\\d-его[,.;:!?\\s]|\\d-ому[,.;:!?\\s]|\\d-ему[,.;:!?\\s]|\\d-ыми[,.;:!?\\s]|\\d-ими[,.;:!?\\s])';app.findGrepPreferences = NothingEnum.nothing;app.findGrepPreferences.findWhat = mySearchedTwoCharacters;				myFoundSamples = myText.findGrep();if (myFoundSamples.length != 0) { // 1// цикл по числу элементов коллекции. Движение снизу вверх    for (j=myFoundSamples.length-1; j >= 0; j--) {			myLine = myFoundSamples[j] ;		myLine.characters.itemByRange(2,2).remove();	// удаляем букву после дефиса	}} // 1app.findGrepPreferences = NothingEnum.nothing;app.findGrepPreferences.findWhat = mySearchedThreeCharacters;				myFoundSamples = myText.findGrep();if (myFoundSamples.length != 0) { // 2// цикл по числу элементов коллекции. Движение снизу вверх    for (j=myFoundSamples.length-1; j >= 0; j--) {			myLine = myFoundSamples[j] ;		myLine.characters.itemByRange(2,2).remove();	// удаляем букву после дефиса        }   } // 2} //myAugment///////////////function myRemoveHyperLinks() { // myRemoveHyperLinksvar myRez = 0;// статей в документе может быть несколько, поэтому узнаем индекс обрабатываемой, myTextvar myStoryIndex = -1;for (var jj = 0; jj < myDocument.stories.length; jj++) { // myDocument.stories.length    if (myDocument.stories[jj] == myText) { myStoryIndex = jj; break; }    } // myDocument.stories.lengthif (myStoryIndex == -1) { // myStoryIndex == -1    alert("Не удалось определить индекс статьи. Удаление гиперссылок прекращено. [1]", myProgramTitul);    return;    } // myStoryIndex == -1if (myDocument.hyperlinks.length > 0) { // ifvar myHypStoryIndex = -1;var myHypStory;var myHypLink;var myDocHypLength = myDocument.hyperlinks.length;//for (var j = 0; j < myDocument.hyperlinks.length; j++) { // forfor (var j = myDocHypLength-1; j >=0 ; j--) { // for         myHypLink = myDocument.hyperlinks[j];       myHypStory = myHypLink.source.sourceText.parentStory;      for (var jj = 0; jj < myDocument.stories.length; jj++) { // myDocument.stories.length                if (myDocument.stories[jj] == myHypStory) { myHypStoryIndex = jj; break; }      } // myDocument.stories.length      if (myHypStoryIndex == -1) { // myHypStoryIndex == -1            alert("Не удалось определить индекс статьи. Удаление гиперссылок прекращено. [2]", myProgramTitul);            return;      } // myHypStoryIndex == -1      if (myStoryIndex != myHypStoryIndex) continue; // найденная гиперссылка не принадлежит этой статье         // if (myHypLink.source.sourceText.characters[0].index < myStartOfFragment || myHypLink.source.sourceText.characters[0].index > myEndOfFragment) continue; // найденная гиперссылка лежит за пределами выделенного диапазона      myDocument.hyperlinks[j].remove();      myRez++;		      } // for}  // if//alert (myRez);return myRez;	} //myRemoveHyperLinks//////////////////////function myBoldItalicAndIndexSelection() {  // myBoldItalicAndIndexSelection	// выделение цветом текста в нижном и верхнем регистре (каждое начертание будет иметь свой символьный стиль)	// Заменяем верхний индекс форматирования символов на символьный стиль "Superscript" 	findAndApplyCharacterStyle({position: Position.SUPERSCRIPT}, "mySupChars");	// Заменяем верхний индекс форматирования символов на символьный стиль "Subrscript" 	findAndApplyCharacterStyle({position: Position.SUBSCRIPT}, "mySubChars");	// Замена стиля текста со специальными начертаниями	findAndApplyCharacterStyle({fontStyle: "Bold"}, "myBoldChars");	findAndApplyCharacterStyle({fontStyle: "Italic"}, "myItalicChars");	findAndApplyCharacterStyle({fontStyle: "Bold Italic"}, "myBoldItalicChars");} // myBoldItalicAndIndexSelection// ищет в указанной коллекции элемент по имени// если таго не находится создает его с указанными параметрамиfunction addDocumentCollectionElement(collectionName, elementParameters) {	var collection = myDocument[collectionName];	var element = collection.itemByName(elementParameters.name);		// если такого элемента нет - добавим его	if (!element.isValid) {		element = collection.add(elementParameters.name);				// копируем параметры		for (var i in elementParameters) {			// указанный шрифт может отсутствовать			// или не содержать указанного начертания			// тогда здесь произойдет исключение			try { 				 element[i] = elementParameters[i];			} catch (e) {				alert("Ошибка при добавлении " + 					elementParameters.name + ": " + e.message);			}		}	}	return element;}// ищет символы по признакам, перечисленным в findTextPreferences// и применяет указанный символьный стильfunction findAndApplyCharacterStyle(findTextPreferences, characterStyleName) {	// сброс всех параметров поиска	app.findTextPreferences = NothingEnum.nothing;		// перенесем указанные параметры поиска	for (var i in findTextPreferences) {		app.findTextPreferences[i] = findTextPreferences[i];	}	var myFound = myText.findText(); //собрана коллекция искомых элементов в статье.		// выход если ничего не найдено	if (0 == myFound.length) return;	var characterStyle = myDocument.characterStyles.itemByName(characterStyleName);		// цикл по числу элементов коллекции. Движение снизу вверх	for (var j = myFound.length; j--; ) {		myFound[j].appliedCharacterStyle = characterStyle;	} }///////////////function myGrekChar() { // myGrekChar var myFSLength;   app.findGrepPreferences = NothingEnum.nothing;app.changeGrepPreferences = NothingEnum.nothing;app.findChangeGrepOptions.includeFootnotes = true;app.findGrepPreferences.findWhat = mySpecialChar;try {    myFoundSamples = myText.findGrep();    myFSLength = myFoundSamples.length;    }catch (e) { myFSLength = 0; }if (myFSLength != 0) { // myFoundSamples.length != 0	var characterStyle = myDocument.characterStyles.itemByName("mySpecialChars");	// цикл по числу элементов коллекции. Движение снизу вверх    for (var j = myFoundSamples.length; j--; ) { // j=myFoundSamples.length-1			var myLine = myFoundSamples[j];		myLine.characters[0].appliedCharacterStyle = characterStyle;	} // j=myFoundSamples.length-1} // myFoundSamples.length != 0    // ищем символы гарнитуры Symbolapp.findGrepPreferences = NothingEnum.nothing;app.changeGrepPreferences = NothingEnum.nothing;app.findChangeGrepOptions.includeFootnotes = true;// здесь возможно исключение - указанный шрифт может отсутствоватьapp.findGrepPreferences.appliedFont = fontSymbol;app.findGrepPreferences.findWhat = "\.";myFoundSamples = myText.findGrep();if (myFoundSamples.length != 0) { // myFoundSamples.length != 0// цикл по числу элементов коллекции. Движение снизу вверх    for (var j=myFoundSamples.length-1; j >= 0; j--) { // j=myFoundSamples.length-1			var myLine = myFoundSamples[j];		myLine.characters[0].appliedCharacterStyle = myCStyleSpecialChars;	} // j=myFoundSamples.length-1} // myFoundSamples.length != 0    } // // myGrekChar///////////////function myNumberOfActionsAddition(myPara) { // myNumberOfActionsAdditionif (myPara == true) myNumberOfActions++;} // myNumberOfActionsAddition////////////// SingleLevelQuotesForDoTextOK.jsxfunction myAllQuoteProcessing () { // myAllQuoteProcessingvar myLanguage;try {myLanguage = myText.paragraphs[0].appliedLanguage;}catch (e) {}if (myLanguage.name[0] == '[') { // в любом языке информация, что язык не определен, заключена в квадратные скобки.	alert("Не определен язык текста первого абзаца.\nПроцедура упорядочения кавычек отменена.");	return;}app.documents[0].textPreferences.typographersQuotes = true; // установка типографских кавычек для нового текста// абзацы статьи...for (var i = 0; i < myText.paragraphs.length; i++) { // i	myProcessingOfCurrentParagraph(myText.paragraphs[i],myLanguage);} // i// сноски...for (var i = 0; i < myText.footnotes.length; i++) { // i	for (var j = 0; j < myText.footnotes[i].paragraphs.length; j++) { // j		myProcessingOfCurrentParagraph(myText.footnotes[i].paragraphs[j],myLanguage);	} // j} // i// таблицы в основном тексте...for (var i = 0; i < myText.tables.length; i++) { // i	for (var j = 0; j < myText.tables[i].cells.length; j++) { // j		for (var k = 0; k < myText.tables[i].cells[j].paragraphs.length; k++) { // k			myProcessingOfCurrentParagraph(myText.tables[i].cells[j].paragraphs[k],myLanguage);		} // k	} // j} //i// таблицы в привязанных текстовых фреймах или группах...myAllPageItemsProcessing(myText,myLanguage);///return;} // myAllQuoteProcessing///function myProcessingOfCurrentParagraph (myPara,myLanguage) { // myProcessingOfCurrentParagraph// если в обычной функции можно так определить переменную цикла (пусть она называется q):   for (q = 0; q < ...; q++)// то в рекурсивной функции переменная цакла обязательно должна предваряться инструкцией var:   for (var q = 0; q < ...; q++)// это гарантирует, что при при каждом рекурсивном вызове будет создаваться свой экземпляр переменной цикла.//myQuotesProc(myPara,myLanguage);myAllPageItemsProcessing(myPara,myLanguage);for (var pp = 0; pp < myPara.tables.length; pp++) { // pp	var myTable = myPara.tables[pp]; // таблица в этом абзаце	for (var jj = 0; jj < myTable.cells.length; jj++) { // jj		var myCellInTable = myTable.cells[jj]; // ячейка в этой таблице		for (var kk = 0; kk < myCellInTable.paragraphs.length; kk++)  myProcessingOfCurrentParagraph(myCellInTable.paragraphs[kk],myLanguage); // рекурсивный вызов функции	} // jj} // pp} // myProcessingOfCurrentParagraph////function myProcessingOfTextFrame(myTextFrame,myLanguage) { // myProcessingOfTextFramefor (var i = 0; i < myTextFrame.tables.length; i++) { // i	for (var j = 0; j < myTextFrame.tables[i].cells.length; j++) { // j		for (var k = 0; k < myTextFrame.tables[i].cells[j].paragraphs.length; k++) myProcessingOfCurrentParagraph(myTextFrame.tables[i].cells[j].paragraphs[k],myLanguage);	} // j} // ifor (var ii = 0; ii < myTextFrame.paragraphs.length; ii++) { // i i	myProcessingOfCurrentParagraph(myTextFrame.paragraphs[ii],myLanguage);} // i i	} // myProcessingOfTextFrame///function myQuotesProc(myPt,myLanguage) { // myQuotesProctry { myPt.appliedLanguage = myLanguage;}catch (e) {};myQuoteChars(myPt);} // myQuotesProc////function myAllPageItemsProcessing(myAPI,myLanguage) { // myAllPageItemsProcessingfor (var t = 0; t < myAPI.allPageItems.length; t++) { // t	myInform = myAPI.allPageItems[0];	if (myAPI.allPageItems[t].constructor.name == "TextFrame") { // "TextFrame"		myProcessingOfTextFrame(myAPI.allPageItems[t],myLanguage);	} // "TextFrame"	if (myAPI.allPageItems[t].constructor.name == "Group") { // "Group"		for (var p = 0; p < myAPI.allPageItems[t].textFrames.length; p++) { // p			myProcessingOfTextFrame(myAPI.allPageItems[t].textFrames[p],myLanguage);		} // p	} // "Group"} // t} // myAllPageItemsProcessing/////function myQuoteChars(myAbzatz) { //myQuoteCharsvar myLetters = '(„|“|«|»|”|‚|‘|’|\'|\")';var myPrevChar, myNextChar;var myP, myN;app.findGrepPreferences = NothingEnum.nothing;app.findGrepPreferences.findWhat = myLetters;				myFoundSamples = myAbzatz.findGrep();if (myFoundSamples.length != 0) { // myFoundSamples.length != 0// цикл по числу элементов коллекции. Движение снизу вверх    for (var j=myFoundSamples.length-1; j >= 0; j--) { // j >= 0; j--			var myLine = myFoundSamples[j];         myPrevChar = myText.characters[myLine.index-1].contents;         myNextChar = myText.characters[myLine.index+1].contents;         // обойдем случаи ошибочной замены апострофа в тексте I'm / you can't на кавычку         /*         myP = myPrevChar.search("[\\l\\u]"); // -1 совпадения не найдено         myN = myNextChar.search("[\\l\\u]"); // -1 совпадения не найдено		if (myP != -1 &&  myN != -1) {            a=0;            myLine.characters[0].contents= "\"";              }          */        myP = myPrevChar.search("(\\s|,|\\.)"); // -1 совпадения не найдено        myN = myNextChar.search("(\\s|,|\\.)"); // -1 совпадения не найдено		if (myP == 0 ||  myN == 0) {            a=0;            myLine.characters[0].contents= "\"";              }           // s' может быть апострофом в конце слова Boys' Brigade / Boys' or Girls' Snow Flurry Boots, а может и закрывающей кавычкой.         // Очевидно, что апостроф в конце слова может быть гораздо реже, нежели закрывающая кавычка.         // Но коль скоро такой случай возможен, покрасим эти апостофы в цвет myInfoColor.         if (myPrevChar == 's' && myNextChar == ' ') { // myPrevChar == 's' && myNextChar == ' '            myLine.contents = myApostrof;            myLine.fillColor = myDocument.colors.itemByName("myInfoColor");            a=0;        } // myPrevChar == 's' && myNextChar == ' '    } // j >= 0; j--} // myFoundSamples.length != 0} //myQuoteChars///function FootnoteSignMustBe(Info) { //FootnoteSignMustBe	app.findTextPreferences = NothingEnum.nothing;	app.changeTextPreferences = NothingEnum.nothing;	app.findChangeTextOptions.properties = {includeFootnotes: true};	app.findTextPreferences.findWhat = '^F';	myFoundSamples = myText.findText();	var characterStyle = myDocument.characterStyles.itemByName("myFootnotes");		for (i = myFoundSamples.length - 1; i >= 0; i--) { // myFoundSamples.length - 1		myFoundSamples[i].appliedCharacterStyle = characterStyle;				if (myFoundSamples[i].parent.constructor.name == "Footnote") {			continue;		}		var mySt = myFoundSamples[i].parentStory;		var myFootnoteChar = mySt.characters.item(myFoundSamples[i].insertionPoints[0].index);		var myNextChar = mySt.characters.item(myFootnoteChar.index + 1);    		var myNextCharContents = myNextChar.contents;		var myPrevChar = myFootnoteChar.parent.characters.item(myFootnoteChar.index - 1);    		var myPrevCharContents = myPrevChar.contents;		if (Info == "BeforePoint")  {  			if (myPrevCharContents == "." || myPrevCharContents == ",") {				myPrevChar.move(					LocationOptions.after, 					mySt.characters.item(myFoundSamples[i].insertionPoints[0].index)); 			}		} 		else  /* Info == "AfterPoint"  */ {  			if (myNextCharContents == "." || myNextCharContents == ",") {				myNextChar.move(					LocationOptions.before, 					mySt.characters.item(myFoundSamples[i].insertionPoints[0].index)); 			}		} 	} // myFoundSamples.length - 1} // FootnoteSignMustBe////function myRemoveSpacesBeforeFootnoteSign() { // myRemoveSpacesBeforeFootnoteSignapp.findTextPreferences = NothingEnum.nothing;app.changeTextPreferences = NothingEnum.nothing;app.findTextPreferences.findWhat=' ^F'; // ищем пробел и знак сноскиmyFoundSamples = myText.findText();for(i = myFoundSamples.length - 1; i >= 0; i--) { // myFoundSamples.length - 1var myFound = myFoundSamples[i];myFound.characters.firstItem().remove(); // пробел удаляем} // myFoundSamples.length - 1} // myRemoveSpacesBeforeFootnoteSign////function myAddSpacesBeforeFootnoteSign() { // myAddSpacesBeforeFootnoteSignapp.findTextPreferences = NothingEnum.nothing;app.changeTextPreferences = NothingEnum.nothing;app.findTextPreferences.findWhat='^?^F'; // ищем знак сноски и символ перед нимmyFoundSamples = myText.findText();for(i = myFoundSamples.length - 1; i >= 0; i--) { // myFoundSamples.length - 1var myFound = myFoundSamples[i];var myFrstChar = myFound.characters[0].contents;if (myFrstChar != "." && myFrstChar != ",")// вставляем волосяную шпацию перед знаком сноскиmyFound.insertionPoints[-2].contents = "\u2009";} // myFoundSamples.length - 1} // myAddSpacesBeforeFootnoteSign////////////////////////function myNextStep (myFunc,myCurrActionNumber) { // //myCurrActionNumber++;myFunc.set(myCurrActionNumber);} // myNextStep///////function myFile(myFileName) {var myScriptFile = myGetScriptPath();var myScriptFolder = decodeURI(myScriptFile.path);var myFilePath = decodeURI(myScriptFolder + "/" +myFileName);return myFilePath;} //myFile//function myGetScriptPath() {	try{		return app.activeScript;	}	catch(myError){		return File(myError.fileName);	}} //myGetScriptPath()//////function mySetDefaultValues() { // mySetDefaultValuesmyClean_value = myClean_value_start ;c_options_enabled = c_options_enabled_start;repChar_value = repChar_value_start;tabs2spaces_value = tabs2spaces_value_start;hyphens_value = hyphens_value_start;bull2text_value = bull2text_value_start;charStyles_value = charStyles_value_start;digAndChar_value = digAndChar_value_start;oneStyle_value = oneStyle_value_start;rusLang_value = rusLang_value_start;myTypographica_value = myTypographica_value_start;t_options_enabled = t_options_enabled_start ;////----hyplinks_value = hyplinks_value_start;fixOneLetter_value = fixOneLetter_value_start;fixTwoLetter_value = fixTwoLetter_value_start;fixDigitAndWord_value = fixDigitAndWord_value_start;commonTire_value = commonTire_value_start;minus_value = minus_value_start;mlnWithoutPoint_value = mlnWithoutPoint_value_start;myProcAndPromille_value = myProcAndPromille_value_start;//---slitno_value = slitno_value_start;myFootnoteGroup_value = myFootnoteGroup_value_start; footnote1_value = footnote1_value_start;mySpatium_value = mySpatium_value_start;s_options_enabled = s_options_enabled_start;////----tireAndSpatium_value = tireAndSpatium_value_start;mySpaceListBefore_selection = mySpaceListBefore_selection_start;mySpaceListAfter_selection = mySpaceListAfter_selection_start;mySlider_value = mySlider_value_start;commatire_value = commatire_value_start;grekCharStyles_value = grekCharStyles_value_start;myCommaAndTire_selection = myCommaAndTire_selection_start;shortword_value = shortword_value_start;myShortWordSpace_selection = myShortWordSpace_selection_start;initials_value = initials_value_start;myASPushkinFirstSpace_selection = myASPushkinFirstSpace_selection_start;myASPushkinSecondSpace_selection = myASPushkinSecondSpace_selection_start;myPushkinASFirstSpace_selection = myPushkinASFirstSpace_selection_start;myPushkinASSecondSpace_selection = myPushkinASSecondSpace_selection_start;setquotes_value = setquotes_value_start;p_options_enabled = p_options_enabled_start;sevendigits_value = sevendigits_value_start;sixdigits_value = sixdigits_value_start;mySet34_value = mySet34_value_start;mySet322_value = mySet322_value_start;SepIsSpace_value = SepIsSpace_value_start;SepIsDefis_value = SepIsDefis_value_start;SepIsMinus_value = SepIsMinus_value_start;SearchedDefis_value = SearchedDefis_value_start;SearchedTire_value = SearchedTire_value_start;SearchedMinus_value = SearchedMinus_value_start;myOneLineIsOneAbzatz_value = myOneLineIsOneAbzatz_start;} // mySetDefaultValues////////////function MakeSlashNoBreak() { // MakeSlashNoBreak()var mySlashIndex;app.findGrepPreferences = NothingEnum.nothing;app.changeGrepPreferences = NothingEnum.nothing;app.findChangeGrepOptions.includeFootnotes = true;app.findGrepPreferences.findWhat="(\\s)([\\l\\u]+?\\.{0,1})(/)([\\l\\u]+?\\.{0,1})(\\s)";myFoundSamples = myText.findGrep();for(i = myFoundSamples.length - 1; i >= 0; i--) { // myFoundSamples.length - 1try { mySlashIndex = myFoundSamples[i].contents.search("/") } catch (e) { continue }myFoundSamples[i].characters[mySlashIndex].noBreak = true;} // myFoundSamples.length - 1} // MakeSlashNoBreak()    ///////////